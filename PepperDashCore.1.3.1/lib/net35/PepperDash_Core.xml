<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PepperDash_Core</name>
    </assembly>
    <members>
        <member name="T:PepperDash.Core.PasswordManagement.PasswordManagementConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManagementConstants.BoolValueChange">
            <summary>
            Generic boolean value change constant
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManagementConstants.PasswordInitializedChange">
            <summary>
            Evaluated boolean change constant
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManagementConstants.PasswordUpdateBusyChange">
            <summary>
            Update busy change const
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManagementConstants.PasswordValidationChange">
            <summary>
            Password is valid change constant
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManagementConstants.PasswordLedFeedbackChange">
            <summary>
            Password LED change constant
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManagementConstants.UshrtValueChange">
            <summary>
            Generic ushort value change constant
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManagementConstants.PasswordManagerCountChange">
            <summary>
            Password count
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManagementConstants.PasswordSelectIndexChange">
            <summary>
            Password selecte index change constant
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManagementConstants.PasswordLengthChange">
            <summary>
            Password length
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManagementConstants.StringValueChange">
            <summary>
            Generic string value change constant
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonStandardObjects.DeviceConfig">
            <summary>
            Device class
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.DeviceConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.DeviceConfig.Initialize(System.String,System.String)">
            <summary>
            Initialize method
            </summary>
            <param name="uniqueID"></param>
            <param name="deviceKey"></param>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.DeviceConfig.OnBoolChange(System.Boolean,System.UInt16,System.UInt16)">
            <summary>
            BoolChange event handler helper
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.DeviceConfig.OnUshrtChange(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            UshrtChange event handler helper
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.DeviceConfig.OnStringChange(System.String,System.UInt16,System.UInt16)">
            <summary>
            StringChange event handler helper
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.DeviceConfig.OnObjectChange(PepperDash.Core.JsonStandardObjects.DeviceConfig,System.UInt16,System.UInt16)">
            <summary>
            ObjectChange event handler helper
            </summary>
            <param name="device"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.DeviceConfig.key">
            <summary>
            JSON config key property
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.DeviceConfig.name">
            <summary>
            JSON config name property
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.DeviceConfig.type">
            <summary>
            JSON config type property
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.DeviceConfig.properties">
            <summary>
            JSON config properties 
            </summary>
        </member>
        <member name="E:PepperDash.Core.JsonStandardObjects.DeviceConfig.BoolChange">
            <summary>
            Bool change event handler
            </summary>
        </member>
        <member name="E:PepperDash.Core.JsonStandardObjects.DeviceConfig.UshrtChange">
            <summary>
            Ushort change event handler
            </summary>
        </member>
        <member name="E:PepperDash.Core.JsonStandardObjects.DeviceConfig.StringChange">
            <summary>
            String change event handler
            </summary>
        </member>
        <member name="E:PepperDash.Core.JsonStandardObjects.DeviceConfig.DeviceChange">
            <summary>
            Object change event handler
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericHttpSseClient">
            <summary>
            Client for communicating with an HTTP Server Side Event pattern
            </summary>
        </member>
        <member name="T:PepperDash.Core.ICommunicationReceiver">
            <summary>
            An incoming communication stream
            </summary>
        </member>
        <member name="T:PepperDash.Core.IKeyed">
            <summary>
            Unique key interface to require a unique key for the class
            </summary>
        </member>
        <member name="P:PepperDash.Core.IKeyed.Key">
            <summary>
            Unique Key
            </summary>
        </member>
        <member name="M:PepperDash.Core.ICommunicationReceiver.Connect">
            <summary>
            Connect to the device
            </summary>
        </member>
        <member name="M:PepperDash.Core.ICommunicationReceiver.Disconnect">
            <summary>
            Disconnect from the device
            </summary>
        </member>
        <member name="E:PepperDash.Core.ICommunicationReceiver.BytesReceived">
            <summary>
            Notifies of bytes received
            </summary>
        </member>
        <member name="E:PepperDash.Core.ICommunicationReceiver.TextReceived">
            <summary>
            Notifies of text received
            </summary>
        </member>
        <member name="P:PepperDash.Core.ICommunicationReceiver.IsConnected">
            <summary>
            Indicates connection status
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericHttpSseClient.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key"></param>
            <param name="name"></param>
        </member>
        <member name="M:PepperDash.Core.GenericHttpSseClient.Connect">
            <summary>
            Connects to the server.  Requires Url to be set first.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericHttpSseClient.Disconnect">
            <summary>
            Disconnects from the server
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericHttpSseClient.InitiateConnection(System.String)">
            <summary>
            Initiates connection to the server
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:PepperDash.Core.GenericHttpSseClient.CloseConnection(System.String)">
            <summary>
            Closes the connection to the server
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:PepperDash.Core.GenericHttpSseClient.GetResponseStreamCallback(Crestron.SimplSharp.Net.Http.HttpClientRequest,Crestron.SimplSharp.Net.Http.HTTP_CALLBACK_ERROR,System.Object)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="error"></param>
            <param name="status"></param>
        </member>
        <member name="E:PepperDash.Core.GenericHttpSseClient.BytesReceived">
            <summary>
            Notifies when bytes have been received
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericHttpSseClient.TextReceived">
            <summary>
            Notifies when text has been received
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericHttpSseClient.IsConnected">
            <summary>
            Indicates connection status
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericHttpSseClient.Key">
            <summary>
            Unique identifier for the instance
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericHttpSseClient.Name">
            <summary>
            Name for the instance
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericHttpSseClient.Url">
            <summary>
            URL of the server
            </summary>
        </member>
        <member name="T:PepperDash.Core.RequestState">
            <summary>
            Stores the state of the request
            </summary>
        </member>
        <member name="F:PepperDash.Core.RequestState.BUFFER_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.RequestState.BufferRead">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.RequestState.HttpClient">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.RequestState.Request">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.RequestState.Response">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.RequestState.StreamResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.RequestState.Done">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.RequestState.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:PepperDash.Core.StreamAsyncTest">
            <summary>
            Waithandle for main thread.
            </summary>
        </member>
        <member name="F:PepperDash.Core.StreamAsyncTest.wait_for_response">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.Intersystem.XSigTokenStreamReader">
            <summary>
            XSigToken stream reader.
            </summary>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamReader.#ctor(Crestron.SimplSharp.CrestronIO.Stream)">
            <inheritdoc />
            <summary>
            XSigToken stream reader constructor.
            </summary>
            <param name="stream">Input stream to read from.</param>
            <exception cref="T:System.ArgumentNullException">Stream is null.</exception>
            <exception cref="T:System.ArgumentException">Stream cannot be read from.</exception>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamReader.#ctor(Crestron.SimplSharp.CrestronIO.Stream,System.Boolean)">
            <summary>
            XSigToken stream reader constructor.
            </summary>
            <param name="stream">Input stream to read from.</param>
            <param name="leaveOpen">Determines whether to leave the stream open or not.</param>
            <exception cref="T:System.ArgumentNullException">Stream is null.</exception>
            <exception cref="T:System.ArgumentException">Stream cannot be read from.</exception>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamReader.TryReadUInt16BE(Crestron.SimplSharp.CrestronIO.Stream,System.UInt16@)">
            <summary>
            Reads a 16-bit unsigned integer from the specified stream using Big Endian byte order.
            </summary>
            <param name="stream">Input stream</param>
            <param name="value">Result</param>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamReader.ReadXSigToken">
            <summary>
            Read XSig token from the stream.
            </summary>
            <returns>XSigToken</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset is less than 0.</exception>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamReader.ReadAllXSigTokens">
            <summary>
            Reads all available XSig tokens from the stream.
            </summary>
            <returns>XSigToken collection.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamReader.DeserializeStream``1">
            <summary>
            Attempts to deserialize all XSig data within the stream from the current position.
            </summary>
            <typeparam name="T">Type to deserialize the information to.</typeparam>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamReader.Dispose">
            <summary>
            Disposes of the internal stream if specified to not leave open.
            </summary>
        </member>
        <member name="T:PepperDash.Core.Intersystem.Tokens.XSigAnalogToken">
            <summary>
            Represents an XSigAnalogToken
            </summary>
        </member>
        <member name="T:PepperDash.Core.Intersystem.Tokens.XSigToken">
            <summary>
            Represents the base class for all XSig datatypes.
            </summary>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigToken.#ctor(System.Int32)">
            <summary>
            Constructs an XSigToken with the specified index.
            </summary>
            <param name="index">Index for the data.</param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigToken.GetBytes">
            <summary>
            Generates the XSig bytes for the corresponding token.
            </summary>
            <returns>XSig byte array.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigToken.GetTokenWithOffset(System.Int32)">
            <summary>
            Returns a new token if necessary with an updated index based on the specified offset.
            </summary>
            <param name="offset">Offset to adjust the index with.</param>
            <returns>XSigToken</returns>
        </member>
        <member name="P:PepperDash.Core.Intersystem.Tokens.XSigToken.Index">
            <summary>
            XSig 1-based index.
            </summary>
        </member>
        <member name="P:PepperDash.Core.Intersystem.Tokens.XSigToken.TokenType">
            <summary>
            XSigToken type.
            </summary>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigAnalogToken.#ctor(System.Int32,System.UInt16)">
            <summary>
            Constructor
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigAnalogToken.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigAnalogToken.GetTokenWithOffset(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigAnalogToken.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigAnalogToken.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="P:PepperDash.Core.Intersystem.Tokens.XSigAnalogToken.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.Intersystem.Tokens.XSigAnalogToken.TokenType">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.SystemInfo.SystemInfoConstants">
            <summary>
            Constants 
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.BoolValueChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.CompleteBoolChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.BusyBoolChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.UshortValueChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.StringValueChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.ConsoleResponseChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.ProcessorUptimeChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.ProgramUptimeChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.ObjectChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.ProcessorConfigChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.EthernetConfigChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.ControlSubnetConfigChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.SystemInfo.SystemInfoConstants.ProgramConfigChange">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.SystemInfo.ProcessorChangeEventArgs">
            <summary>
            Processor Change Event Args Class
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ProcessorChangeEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ProcessorChangeEventArgs.#ctor(PepperDash.Core.SystemInfo.ProcessorInfo,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ProcessorChangeEventArgs.#ctor(PepperDash.Core.SystemInfo.ProcessorInfo,System.UInt16,System.UInt16)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorChangeEventArgs.Processor">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorChangeEventArgs.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorChangeEventArgs.Index">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.SystemInfo.EthernetChangeEventArgs">
            <summary>
            Ethernet Change Event Args Class
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.EthernetChangeEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.EthernetChangeEventArgs.#ctor(PepperDash.Core.SystemInfo.EthernetInfo,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="ethernet"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.EthernetChangeEventArgs.#ctor(PepperDash.Core.SystemInfo.EthernetInfo,System.UInt16,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="ethernet"></param>
            <param name="type"></param>
            <param name="index"></param>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetChangeEventArgs.Adapter">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetChangeEventArgs.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetChangeEventArgs.Index">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.SystemInfo.ControlSubnetChangeEventArgs">
            <summary>
            Control Subnet Chage Event Args Class
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ControlSubnetChangeEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ControlSubnetChangeEventArgs.#ctor(PepperDash.Core.SystemInfo.ControlSubnetInfo,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ControlSubnetChangeEventArgs.#ctor(PepperDash.Core.SystemInfo.ControlSubnetInfo,System.UInt16,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ControlSubnetChangeEventArgs.Adapter">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ControlSubnetChangeEventArgs.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ControlSubnetChangeEventArgs.Index">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.SystemInfo.ProgramChangeEventArgs">
            <summary>
            Program Change Event Args Class
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ProgramChangeEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ProgramChangeEventArgs.#ctor(PepperDash.Core.SystemInfo.ProgramInfo,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="program"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ProgramChangeEventArgs.#ctor(PepperDash.Core.SystemInfo.ProgramInfo,System.UInt16,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="program"></param>
            <param name="type"></param>
            <param name="index"></param>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProgramChangeEventArgs.Program">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProgramChangeEventArgs.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProgramChangeEventArgs.Index">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericTcpIpServer">
            <summary>
            Generic TCP/IP server device
            </summary>
        </member>
        <member name="T:PepperDash.Core.Device">
            <summary>
            The core event and status-bearing class that most if not all device and connectors can derive from.
            </summary>
        </member>
        <member name="T:PepperDash.Core.IKeyName">
            <summary>
            Named Keyed device interface. Forces the devie to have a Unique Key and a name. 
            </summary>
        </member>
        <member name="P:PepperDash.Core.IKeyName.Name">
            <summary>
            Isn't it obvious :)
            </summary>
        </member>
        <member name="M:PepperDash.Core.Device.#ctor(System.String)">
            <summary>
            Base constructor for all Devices.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PepperDash.Core.Device.#ctor(System.String,System.String)">
            <summary>
            Constructor with key and name
            </summary>
            <param name="key"></param>
            <param name="name"></param>
        </member>
        <member name="M:PepperDash.Core.Device.AddPreActivationAction(System.Action)">
            <summary>
            Adds a pre activation action
            </summary>
            <param name="act"></param>
        </member>
        <member name="M:PepperDash.Core.Device.AddPostActivationAction(System.Action)">
            <summary>
            Adds a post activation action
            </summary>
            <param name="act"></param>
        </member>
        <member name="M:PepperDash.Core.Device.PreActivate">
            <summary>
            Executes the preactivation actions
            </summary>
        </member>
        <member name="M:PepperDash.Core.Device.Activate">
            <summary>
            Gets this device ready to be used in the system. Runs any added pre-activation items, and
            all post-activation at end. Classes needing additional logic to 
            run should override CustomActivate()
            </summary>
        </member>
        <member name="M:PepperDash.Core.Device.PostActivate">
            <summary>
            Executes the postactivation actions
            </summary>
        </member>
        <member name="M:PepperDash.Core.Device.CustomActivate">
            <summary>
            Called in between Pre and PostActivationActions when Activate() is called. 
            Override to provide addtitional setup when calling activation.  Overriding classes 
            do not need to call base.CustomActivate()
            </summary>
            <returns>true if device activated successfully.</returns>
        </member>
        <member name="M:PepperDash.Core.Device.Deactivate">
            <summary>
            Call to deactivate device - unlink events, etc.  Overriding classes do not
            need to call base.Deactivate()
            </summary>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Device.Initialize">
            <summary>
            Call this method to start communications with a device. Overriding classes do not need to call base.Initialize()
            </summary>
        </member>
        <member name="M:PepperDash.Core.Device.OnFalse(System.Object,System.Action)">
            <summary>
            Helper method to check object for bool value false and fire an Action method
            </summary>
            <param name="o">Should be of type bool, others will be ignored</param>
            <param name="a">Action to be run when o is false</param>
        </member>
        <member name="P:PepperDash.Core.Device.Key">
            <summary>
            Unique Key
            </summary>
        </member>
        <member name="P:PepperDash.Core.Device.Name">
            <summary>
            Name of the devie
            </summary>
        </member>
        <member name="P:PepperDash.Core.Device.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.Device.DefaultDevice">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpServer.ServerCCSection">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpServer.MonitorClient">
            <summary>
            A bandaid client that monitors whether the server is reachable
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpServer.MonitorClientTimer">
            <summary>
            Timer to operate the bandaid monitor client in a loop.
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpServer.MonitorClientFailureCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpServer.ConnectedClientsIndexes">
            <summary>
            The connected client indexes
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpServer.ProgramIsStopping">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.#ctor">
            <summary>
            constructor S+ Does not accept a key. Use initialze with key to set the debug key on this device. If using with + make sure to set all properties manually.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.#ctor(System.String)">
            <summary>
            constructor with debug key set at instantiation. Make sure to set all properties before listening. 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.#ctor(PepperDash.Core.TcpServerConfigObject)">
            <summary>
            Contstructor that sets all properties by calling the initialize method with a config object.
            </summary>
            <param name="serverConfigObject"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.KillServer">
            <summary>
            Disconnects all clients and stops the server
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.Initialize(System.String)">
            <summary>
            Initialize Key for device using client name from SIMPL+. Called on Listen from SIMPL+
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.Initialize(PepperDash.Core.TcpServerConfigObject)">
            <summary>
            Initialze with server configuration object
            </summary>
            <param name="serverConfigObject"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.Listen">
            <summary>
            Start listening on the specified port
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.StopListening">
            <summary>
            Stop Listening
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.DisconnectClient(System.UInt32)">
            <summary>
            Disconnects Client
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.DisconnectAllClientsForShutdown">
            <summary>
            Disconnect All Clients
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.BroadcastText(System.String)">
            <summary>
            Broadcast text from server to all connected clients
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.SendTextToClient(System.String,System.UInt32)">
            <summary>
            Not sure this is useful in library, maybe Pro??
            </summary>
            <param name="text"></param>
            <param name="clientIndex"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.GetClientIPAddress(System.UInt32)">
            <summary>
            Gets the IP address based on the client index
            </summary>
            <param name="clientIndex"></param>
            <returns>IP address of the client</returns>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.TcpServer_SocketStatusChange(Crestron.SimplSharp.CrestronSockets.TCPServer,System.UInt32,Crestron.SimplSharp.CrestronSockets.SocketStatus)">
            <summary>
            Secure Server Socket Status Changed Callback
            </summary>
            <param name="server"></param>
            <param name="clientIndex"></param>
            <param name="serverSocketStatus"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.TcpConnectCallback(Crestron.SimplSharp.CrestronSockets.TCPServer,System.UInt32)">
            <summary>
            Secure TCP Client Connected to Secure Server Callback
            </summary>
            <param name="server"></param>
            <param name="clientIndex"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.TcpServerReceivedDataAsyncCallback(Crestron.SimplSharp.CrestronSockets.TCPServer,System.UInt32,System.Int32)">
            <summary>
            Secure Received Data Async Callback
            </summary>
            <param name="myTCPServer"></param>
            <param name="clientIndex"></param>
            <param name="numberOfBytesReceived"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.CrestronEnvironment_ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Private Event Handler method to handle the closing of connections when the program stops
            </summary>
            <param name="programEventType"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.StartMonitorClient">
            <summary>
            Starts the monitor client cycle. Timed wait, then call RunMonitorClient
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.RunMonitorClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.StopMonitorClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.MonitorClient_IsReadyForComm(System.Object,PepperDash.Core.GenericTcpServerClientReadyForcommunicationsEventArgs)">
            <summary>
            On monitor connect, restart the operation
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpServer.MonitorClientHasHungCallback">
            <summary>
            If the client hangs, add to counter and maybe fire the choke event
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericTcpIpServer.TextReceived">
            <summary>
            Event for Receiving text
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericTcpIpServer.ClientConnectionChange">
            <summary>
            Event for client connection socket status change
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericTcpIpServer.ServerStateChange">
            <summary>
            Event for Server State Change
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericTcpIpServer.ServerClientReadyForCommunications">
            <summary>
            For a server with a pre shared key, this will fire after the communication is established and the key exchange is complete. If no shared key, this will fire
            after connection is successful. Use this event to know when the client is ready for communication to avoid stepping on shared key. 
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.ServerHasChoked">
            <summary>
            A band aid event to notify user that the server has choked.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.MonitorClientMaxFailureCount">
            <summary>
            3 by default
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.Status">
            <summary>
            Text representation of the Socket Status enum values for the server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.IsConnected">
            <summary>
            Bool showing if socket is connected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.UIsConnected">
            <summary>
            S+ helper for IsConnected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.IsListening">
            <summary>
            Bool showing if socket is connected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.UIsListening">
            <summary>
            S+ helper for IsConnected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.MaxClients">
            <summary>
            The maximum number of clients.
            Should be set by parameter in SIMPL+ in the MAIN method, Should not ever need to be configurable
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.NumberOfClientsConnected">
            <summary>
            Number of clients currently connected.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.Port">
            <summary>
            Port Server should listen on
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.UPort">
            <summary>
            S+ helper for Port
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.SharedKeyRequired">
            <summary>
            Bool to show whether the server requires a preshared key. Must be set the same in the client, and if true shared keys must be identical on server/client
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.USharedKeyRequired">
            <summary>
            S+ helper for requires shared key bool
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.SharedKey">
            <summary>
            SharedKey is sent for varification to the server. Shared key can be any text (255 char limit in SIMPL+ Module), but must match the Shared Key on the Server module. 
            If SharedKey changes while server is listening or clients are connected, disconnect and stop listening will be called
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.HeartbeatRequired">
            <summary>
            Heartbeat Required bool sets whether server disconnects client if heartbeat is not received
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.UHeartbeatRequired">
            <summary>
            S+ Helper for Heartbeat Required
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.HeartbeatRequiredIntervalMs">
            <summary>
            Milliseconds before server expects another heartbeat. Set by property HeartbeatRequiredIntervalInSeconds which is driven from S+
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.HeartbeatRequiredIntervalInSeconds">
            <summary>
            Simpl+ Heartbeat Analog value in seconds
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.HeartbeatStringToMatch">
            <summary>
            String to Match for heartbeat. If null or empty any string will reset heartbeat timer
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.BufferSize">
            <summary>
            Defaults to 2000
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpServer.ServerStopped">
            <summary>
            Private flag to note that the server has stopped intentionally
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericTcpIpServer.ServerHasChokedCallbackDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.DebugContext">
            <summary>
            Represents a debugging context
            </summary>
        </member>
        <member name="M:PepperDash.Core.DebugContext.GetDebugContext(System.String)">
            <summary>
            Creates or gets a debug context
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.DebugContext.#ctor">
            <summary>
            Do not use.  For S+ access.
            </summary>
        </member>
        <member name="M:PepperDash.Core.DebugContext.CrestronEnvironment_ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Used to save memory when shutting down
            </summary>
            <param name="programEventType"></param>
        </member>
        <member name="M:PepperDash.Core.DebugContext.SetDebugFromConsole(System.String)">
            <summary>
            Callback for console command
            </summary>
            <param name="levelString"></param>
        </member>
        <member name="M:PepperDash.Core.DebugContext.SetDebugLevel(System.Int32)">
            <summary>
            Sets the debug level
            </summary>
            <param name="level"> Valid values 0 (no debug), 1 (critical), 2 (all messages)</param>
        </member>
        <member name="M:PepperDash.Core.DebugContext.Console(System.UInt32,System.String,System.Object[])">
            <summary>
            Prints message to console if current debug level is equal to or higher than the level of this message.
            Uses CrestronConsole.PrintLine.
            </summary>
            <param name="level"></param>
            <param name="format">Console format string</param>
            <param name="items">Object parameters</param>
        </member>
        <member name="M:PepperDash.Core.DebugContext.Console(System.UInt32,PepperDash.Core.IKeyed,System.String,System.Object[])">
            <summary>
            Appends a device Key to the beginning of a message
            </summary>
        </member>
        <member name="M:PepperDash.Core.DebugContext.Console(System.UInt32,PepperDash.Core.IKeyed,PepperDash.Core.Debug.ErrorLogLevel,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="level"></param>
            <param name="dev"></param>
            <param name="errorLogLevel"></param>
            <param name="format"></param>
            <param name="items"></param>
        </member>
        <member name="M:PepperDash.Core.DebugContext.Console(System.UInt32,PepperDash.Core.Debug.ErrorLogLevel,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="level"></param>
            <param name="errorLogLevel"></param>
            <param name="format"></param>
            <param name="items"></param>
        </member>
        <member name="M:PepperDash.Core.DebugContext.LogError(PepperDash.Core.Debug.ErrorLogLevel,System.String)">
            <summary>
            
            </summary>
            <param name="errorLogLevel"></param>
            <param name="str"></param>
        </member>
        <member name="M:PepperDash.Core.DebugContext.SaveMemoryOnTimeout">
            <summary>
            Writes the memory object after timeout
            </summary>
        </member>
        <member name="M:PepperDash.Core.DebugContext.SaveMemory">
            <summary>
            Writes the memory - use SaveMemoryOnTimeout
            </summary>
        </member>
        <member name="M:PepperDash.Core.DebugContext.LoadMemory">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.DebugContext.GetMemoryFileName">
            <summary>
            Helper to get the file path for this app's debug memory
            </summary>
        </member>
        <member name="P:PepperDash.Core.DebugContext.Key">
            <summary>
            Describes the folder location where a given program stores it's debug level memory. By default, the
            file written will be named appNdebug where N is 1-10.
            </summary>
        </member>
        <member name="T:PepperDash.Core.DebugContextSaveData">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.DebugContextSaveData.Level">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonStandardObjects.ComParamsConfig">
            <summary>
            Device communication parameter class
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.ComParamsConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.baudRate">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.dataBits">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.stopBits">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.parity">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.protocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.hardwareHandshake">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.softwareHandshake">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.pacing">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.simplBaudRate">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.simplDataBits">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.simplStopBits">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ComParamsConfig.simplPacing">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonStandardObjects.TcpSshPropertiesConfig">
            <summary>
            Device TCP/SSH properties class
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.TcpSshPropertiesConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.TcpSshPropertiesConfig.address">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.TcpSshPropertiesConfig.port">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.TcpSshPropertiesConfig.username">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.TcpSshPropertiesConfig.password">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.TcpSshPropertiesConfig.autoReconnect">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.TcpSshPropertiesConfig.autoReconnectIntervalMs">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.TcpSshPropertiesConfig.simplPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.TcpSshPropertiesConfig.simplAutoReconnect">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.TcpSshPropertiesConfig.simplAutoReconnectIntervalMs">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonStandardObjects.ControlConfig">
            <summary>
            Device control class
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.ControlConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ControlConfig.method">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ControlConfig.controlPortDevKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ControlConfig.controlPortNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ControlConfig.comParams">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ControlConfig.tcpSshProperties">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.ControlConfig.simplControlPortNumber">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonStandardObjects.PropertiesConfig">
            <summary>
            Device properties class
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.PropertiesConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.PropertiesConfig.deviceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.PropertiesConfig.enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.PropertiesConfig.control">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.PropertiesConfig.simplDeviceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.PropertiesConfig.simplEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonStandardObjects.RootObject">
            <summary>
            Root device class
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.RootObject.devices">
            <summary>
            The collection of devices
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonStandardObjects.JsonStandardDeviceConstants">
            <summary>
            Constants for simpl modules
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonStandardObjects.JsonStandardDeviceConstants.JsonObjectEvaluated">
            <summary>
            Json object evaluated constant
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonStandardObjects.JsonStandardDeviceConstants.JsonObjectChanged">
            <summary>
            Json object changed constant
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonStandardObjects.DeviceChangeEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.DeviceChangeEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.DeviceChangeEventArgs.#ctor(PepperDash.Core.JsonStandardObjects.DeviceConfig,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="device"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.JsonStandardObjects.DeviceChangeEventArgs.#ctor(PepperDash.Core.JsonStandardObjects.DeviceConfig,System.UInt16,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="device"></param>
            <param name="type"></param>
            <param name="index"></param>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.DeviceChangeEventArgs.Device">
            <summary>
            Device change event args object
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.DeviceChangeEventArgs.Type">
            <summary>
            Device change event args type
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonStandardObjects.DeviceChangeEventArgs.Index">
            <summary>
            Device change event args index
            </summary>
        </member>
        <member name="T:PepperDash.Core.BoolChangeEventArgs">
            <summary>
            Bool change event args
            </summary>
        </member>
        <member name="M:PepperDash.Core.BoolChangeEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.BoolChangeEventArgs.#ctor(System.Boolean,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="state"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.BoolChangeEventArgs.#ctor(System.Boolean,System.UInt16,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="state"></param>
            <param name="type"></param>
            <param name="index"></param>
        </member>
        <member name="P:PepperDash.Core.BoolChangeEventArgs.State">
            <summary>
            Boolean state property
            </summary>
        </member>
        <member name="P:PepperDash.Core.BoolChangeEventArgs.IntValue">
            <summary>
            Boolean ushort value property
            </summary>
        </member>
        <member name="P:PepperDash.Core.BoolChangeEventArgs.Type">
            <summary>
            Boolean change event args type
            </summary>
        </member>
        <member name="P:PepperDash.Core.BoolChangeEventArgs.Index">
            <summary>
            Boolean change event args index
            </summary>
        </member>
        <member name="T:PepperDash.Core.UshrtChangeEventArgs">
            <summary>
            Ushort change event args
            </summary>
        </member>
        <member name="M:PepperDash.Core.UshrtChangeEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.UshrtChangeEventArgs.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="intValue"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.UshrtChangeEventArgs.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="intValue"></param>
            <param name="type"></param>
            <param name="index"></param>
        </member>
        <member name="P:PepperDash.Core.UshrtChangeEventArgs.IntValue">
            <summary>
            Ushort change event args integer value
            </summary>
        </member>
        <member name="P:PepperDash.Core.UshrtChangeEventArgs.Type">
            <summary>
            Ushort change event args type
            </summary>
        </member>
        <member name="P:PepperDash.Core.UshrtChangeEventArgs.Index">
            <summary>
            Ushort change event args index
            </summary>
        </member>
        <member name="T:PepperDash.Core.StringChangeEventArgs">
            <summary>
            String change event args
            </summary>
        </member>
        <member name="M:PepperDash.Core.StringChangeEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.StringChangeEventArgs.#ctor(System.String,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="stringValue"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.StringChangeEventArgs.#ctor(System.String,System.UInt16,System.UInt16)">
            <summary>
            Constructor overload
            </summary>
            <param name="stringValue"></param>
            <param name="type"></param>
            <param name="index"></param>
        </member>
        <member name="P:PepperDash.Core.StringChangeEventArgs.StringValue">
            <summary>
            String change event args value
            </summary>
        </member>
        <member name="P:PepperDash.Core.StringChangeEventArgs.Type">
            <summary>
            String change event args type
            </summary>
        </member>
        <member name="P:PepperDash.Core.StringChangeEventArgs.Index">
            <summary>
            string change event args index
            </summary>
        </member>
        <member name="T:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler">
            <summary>
            CWS Base Handler, implements IHttpCwsHandler
            </summary>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.HandleConnect(Crestron.SimplSharp.WebScripting.HttpCwsContext)">
            <summary>
            Handles CONNECT method requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.HandleDelete(Crestron.SimplSharp.WebScripting.HttpCwsContext)">
            <summary>
            Handles DELETE method requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.HandleGet(Crestron.SimplSharp.WebScripting.HttpCwsContext)">
            <summary>
            Handles GET method requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.HandleHead(Crestron.SimplSharp.WebScripting.HttpCwsContext)">
            <summary>
            Handles HEAD method requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.HandleOptions(Crestron.SimplSharp.WebScripting.HttpCwsContext)">
            <summary>
            Handles OPTIONS method requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.HandlePatch(Crestron.SimplSharp.WebScripting.HttpCwsContext)">
            <summary>
            Handles PATCH method requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.HandlePost(Crestron.SimplSharp.WebScripting.HttpCwsContext)">
            <summary>
            Handles POST method requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.HandlePut(Crestron.SimplSharp.WebScripting.HttpCwsContext)">
            <summary>
            Handles PUT method requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.HandleTrace(Crestron.SimplSharp.WebScripting.HttpCwsContext)">
            <summary>
            Handles TRACE method requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.WebApiBaseRequestHandler.ProcessRequest(Crestron.SimplSharp.WebScripting.HttpCwsContext)">
            <summary>
            Process request
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:PepperDash.Core.GenericUdpServer">
            <summary>
            Generic UDP Server device
            </summary>
        </member>
        <member name="T:PepperDash.Core.ISocketStatusWithStreamDebugging">
            <summary>
            Describes a device that implements ISocketStatus and IStreamDebugging
            </summary>
        </member>
        <member name="T:PepperDash.Core.ISocketStatus">
            <summary>
            For IBasicCommunication classes that have SocketStatus. GenericSshClient,
            GenericTcpIpClient
            </summary>
        </member>
        <member name="T:PepperDash.Core.IBasicCommunication">
            <summary>
            Represents a device that uses basic connection
            </summary>
        </member>
        <member name="M:PepperDash.Core.IBasicCommunication.SendText(System.String)">
            <summary>
            Send text to the device
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:PepperDash.Core.IBasicCommunication.SendBytes(System.Byte[])">
            <summary>
            Send bytes to the device
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="E:PepperDash.Core.ISocketStatus.ConnectionChange">
            <summary>
            Notifies of socket status changes
            </summary>
        </member>
        <member name="P:PepperDash.Core.ISocketStatus.ClientStatus">
            <summary>
            The current socket status of the client
            </summary>
        </member>
        <member name="T:PepperDash.Core.IStreamDebugging">
            <summary>
            Represents a device with stream debugging capablities
            </summary>
        </member>
        <member name="P:PepperDash.Core.IStreamDebugging.StreamDebugging">
            <summary>
            Object to enable stream debugging
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericUdpServer.#ctor">
            <summary>
            Constructor for S+. Make sure to set key, address, port, and buffersize using init method
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericUdpServer.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="address"></param>
            <param name="port"></param>
            <param name="buffefSize"></param>
        </member>
        <member name="M:PepperDash.Core.GenericUdpServer.Initialize(System.String,System.String,System.UInt16)">
            <summary>
            Call from S+ to initialize values
            </summary>
            <param name="key"></param>
            <param name="address"></param>
            <param name="port"></param>
        </member>
        <member name="M:PepperDash.Core.GenericUdpServer.CrestronEnvironment_EthernetEventHandler(Crestron.SimplSharp.EthernetEventArgs)">
            <summary>
            
            </summary>
            <param name="ethernetEventArgs"></param>
        </member>
        <member name="M:PepperDash.Core.GenericUdpServer.CrestronEnvironment_ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            
            </summary>
            <param name="programEventType"></param>
        </member>
        <member name="M:PepperDash.Core.GenericUdpServer.Connect">
            <summary>
            Enables the UDP Server
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericUdpServer.Disconnect">
            <summary>
            Disabled the UDP Server
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericUdpServer.Receive(Crestron.SimplSharp.CrestronSockets.UDPServer,System.Int32)">
            <summary>
            Recursive method to receive data
            </summary>
            <param name="server"></param>
            <param name="numBytes"></param>
        </member>
        <member name="M:PepperDash.Core.GenericUdpServer.SendText(System.String)">
            <summary>
            General send method
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:PepperDash.Core.GenericUdpServer.SendBytes(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="P:PepperDash.Core.GenericUdpServer.StreamDebugging">
            <summary>
            Object to enable stream debugging
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericUdpServer.BytesReceived">
            <summary>
            
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericUdpServer.TextReceived">
            <summary>
            
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericUdpServer.DataRecievedExtra">
            <summary>
            This event will fire when a message is dequeued that includes the source IP and Port info if needed to determine the source of the received data.
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericUdpServer.ConnectionChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericUdpServer.UpdateConnectionStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpServer.ClientStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpServer.UStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpServer.Hostname">
            <summary>
            Address of server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpServer.Port">
            <summary>
            Port on server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpServer.UPort">
            <summary>
            Another damn S+ helper because S+ seems to treat large port nums as signed ints
            which screws up things
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpServer.IsConnected">
            <summary>
            Indicates that the UDP Server is enabled
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpServer.UIsConnected">
            <summary>
            Numeric value indicating 
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpServer.BufferSize">
            <summary>
            Defaults to 2000
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpServer.Server">
            <summary>
            The server
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericUdpReceiveTextExtraArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericUdpReceiveTextExtraArgs.#ctor(System.String,System.String,System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:PepperDash.Core.GenericUdpReceiveTextExtraArgs.#ctor">
            <summary>
            Stupid S+ Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpReceiveTextExtraArgs.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpReceiveTextExtraArgs.IpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpReceiveTextExtraArgs.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericUdpReceiveTextExtraArgs.Bytes">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.UdpServerPropertiesConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.UdpServerPropertiesConfig.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.UdpServerPropertiesConfig.Address">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.UdpServerPropertiesConfig.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.UdpServerPropertiesConfig.BufferSize">
            <summary>
            Defaults to 32768
            </summary>
        </member>
        <member name="T:PepperDash.Core.Intersystem.XSigTokenStreamWriter">
            <summary>
            XSigToken stream writer.
            </summary>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamWriter.#ctor(Crestron.SimplSharp.CrestronIO.Stream)">
            <inheritdoc />
            <summary>
            XSigToken stream writer constructor.
            </summary>
            <param name="stream">Input stream to write to.</param>
            <exception cref="T:System.ArgumentNullException">Stream is null.</exception>
            <exception cref="T:System.ArgumentException">Stream cannot be written to.</exception>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamWriter.#ctor(Crestron.SimplSharp.CrestronIO.Stream,System.Boolean)">
            <summary>
            XSigToken stream writer constructor.
            </summary>
            <param name="stream">Input stream to write to.</param>
            <param name="leaveOpen">Determines whether to leave the stream open or not.</param>
            <exception cref="T:System.ArgumentNullException">Stream is null.</exception>
            <exception cref="T:System.ArgumentException">Stream cannot be written to.</exception>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamWriter.WriteXSigData(PepperDash.Core.Intersystem.Serialization.IXSigSerialization)">
            <summary>
            Write XSig data gathered from an IXSigStateResolver to the stream.
            </summary>
            <param name="xSigSerialization">IXSigStateResolver object.</param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamWriter.WriteXSigData(PepperDash.Core.Intersystem.Serialization.IXSigSerialization,System.Int32)">
            <summary>
            Write XSig data gathered from an IXSigStateResolver to the stream.
            </summary>
            <param name="xSigSerialization">IXSigStateResolver object.</param>
            <param name="offset">Index offset for each XSigToken.</param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamWriter.WriteXSigData(PepperDash.Core.Intersystem.Tokens.XSigToken)">
            <summary>
            Write XSigToken to the stream.
            </summary>
            <param name="token">XSigToken object.</param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamWriter.WriteXSigData(PepperDash.Core.Intersystem.Tokens.XSigToken,System.Int32)">
            <summary>
            Write XSigToken to the stream.
            </summary>
            <param name="token">XSigToken object.</param>
            <param name="offset">Index offset for each XSigToken.</param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamWriter.WriteXSigData(PepperDash.Core.Intersystem.Tokens.XSigToken[])">
            <summary>
            Writes an array of XSigTokens to the stream.
            </summary>
            <param name="tokens">XSigToken objects.</param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamWriter.WriteXSigData(System.Collections.Generic.IEnumerable{PepperDash.Core.Intersystem.Tokens.XSigToken})">
            <summary>
            Write an enumerable collection of XSigTokens to the stream.
            </summary>
            <param name="tokens">XSigToken objects.</param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamWriter.WriteXSigData(System.Collections.Generic.IEnumerable{PepperDash.Core.Intersystem.Tokens.XSigToken},System.Int32)">
            <summary>
            Write an enumerable collection of XSigTokens to the stream.
            </summary>
            <param name="tokens">XSigToken objects.</param>
            <param name="offset">Index offset for each XSigToken.</param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigTokenStreamWriter.Dispose">
            <summary>
            Disposes of the internal stream if specified to not leave open.
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.J2SGlobal">
            <summary>
            The global class to manage all the instances of JsonToSimplMaster 
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.J2SGlobal.AddMaster(PepperDash.Core.JsonToSimpl.JsonToSimplMaster)">
            <summary>
            Adds a file master.  If the master's key or filename is equivalent to any existing 
            master, this will fail
            </summary>
            <param name="master">New master to add</param>
            
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.J2SGlobal.GetMasterByFile(System.String)">
            <summary>
            Gets a master by its key.  Case-insensitive
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericSshClient">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.IAutoReconnect">
            <summary>
            Describes a device that can automatically attempt to reconnect
            </summary>
        </member>
        <member name="P:PepperDash.Core.IAutoReconnect.AutoReconnect">
            <summary>
            Enable automatic recconnect
            </summary>
        </member>
        <member name="P:PepperDash.Core.IAutoReconnect.AutoReconnectIntervalMs">
            <summary>
            Interval in ms to attempt automatic recconnections
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Typical constructor.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.#ctor">
            <summary>
            S+ Constructor - Must set all properties before calling Connect
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.Initialize(System.String)">
            <summary>
            Just to help S+ set the key
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.CrestronEnvironment_ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Handles closing this up when the program shuts down
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.Connect">
            <summary>
            Connect to the server, using the provided properties.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.Disconnect">
            <summary>
            Disconnect the clients and put away it's resources.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.KillClient(Crestron.SimplSharp.CrestronSockets.SocketStatus)">
            <summary>
            Kills the stream, cleans up the client and sets it to null
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.HandleConnectionFailure">
            <summary>
            Anything to do with reestablishing connection on failures
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.KillStream">
            <summary>
            Kills the stream
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.kauth_AuthenticationPrompt(System.Object,Crestron.SimplSharp.Ssh.Common.AuthenticationPromptEventArgs)">
            <summary>
            Handles the keyboard interactive authentication, should it be required.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.Stream_DataReceived(System.Object,Crestron.SimplSharp.Ssh.Common.ShellDataEventArgs)">
            <summary>
            Handler for data receive on ShellStream.  Passes data across to queue for line parsing.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.Client_ErrorOccurred(System.Object,Crestron.SimplSharp.Ssh.Common.ExceptionEventArgs)">
            <summary>
            Error event handler for client events - disconnect, etc.  Will forward those events via ConnectionChange
            event
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.OnConnectionChange">
            <summary>
            Helper for ConnectionChange event
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.SendText(System.String)">
            <summary>
            Sends text to the server
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSshClient.SendBytes(System.Byte[])">
            <summary>
            Sends Bytes to the server
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.StreamDebugging">
            <summary>
            Object to enable stream debugging
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSshClient.BytesReceived">
            <summary>
            Event that fires when data is received.  Delivers args with byte array
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSshClient.TextReceived">
            <summary>
            Event that fires when data is received.  Delivered as text.
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSshClient.ConnectionChange">
            <summary>
            Event when the connection status changes.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.Hostname">
            <summary>
            Address of server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.Port">
            <summary>
            Port on server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.Username">
            <summary>
            Username for server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.Password">
            <summary>
            And... Password for server.  That was worth documenting!
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.IsConnected">
            <summary>
            True when the server is connected - when status == 2.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.UIsConnected">
            <summary>
            S+ helper for IsConnected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.ClientStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.UStatus">
            <summary>
            Contains the familiar Simpl analog status values. This drives the ConnectionChange event
            and IsConnected with be true when this == 2.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.AutoReconnect">
            <summary>
            Determines whether client will attempt reconnection on failure. Default is true
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.ConnectEnabled">
            <summary>
            Will be set and unset by connect and disconnect only
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.UAutoReconnect">
            <summary>
            S+ helper for AutoReconnect
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSshClient.AutoReconnectIntervalMs">
            <summary>
            Millisecond value, determines the timeout period in between reconnect attempts.
            Set to 5000 by default
            </summary>
        </member>
        <member name="T:PepperDash.Core.SshConnectionChangeEventArgs">
            <summary>
            Fired when connection changes
            </summary>
        </member>
        <member name="M:PepperDash.Core.SshConnectionChangeEventArgs.#ctor">
            <summary>
             S+ Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.SshConnectionChangeEventArgs.#ctor(System.Boolean,PepperDash.Core.GenericSshClient)">
            <summary>
            EventArgs class
            </summary>
            <param name="isConnected">Connection State</param>
            <param name="client">The Client</param>
        </member>
        <member name="P:PepperDash.Core.SshConnectionChangeEventArgs.IsConnected">
            <summary>
            Connection State
            </summary>
        </member>
        <member name="P:PepperDash.Core.SshConnectionChangeEventArgs.UIsConnected">
            <summary>
            Connection Status represented as a ushort
            </summary>
        </member>
        <member name="P:PepperDash.Core.SshConnectionChangeEventArgs.Client">
            <summary>
            The client
            </summary>
        </member>
        <member name="P:PepperDash.Core.SshConnectionChangeEventArgs.Status">
            <summary>
            Socket Status as represented by
            </summary>
        </member>
        <member name="T:PepperDash.Core.SystemInfo.SystemInfoToSimpl">
            <summary>
            System Info class
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.GetProcessorInfo">
            <summary>
            Gets the current processor info
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.GetEthernetInfo">
            <summary>
            Gets the current ethernet info
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.GetControlSubnetInfo">
            <summary>
            Gets the current control subnet info
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.GetProgramInfoByIndex(System.UInt16)">
            <summary>
            Gets the program info by index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.RefreshProcessorUptime">
            <summary>
            Gets the processor uptime and passes it to S+
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.RefreshProgramUptimeByIndex(System.Int32)">
            <summary>
            Gets the program uptime, by index, and passes it to S+
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.SendConsoleCommand(System.String)">
            <summary>
            Sends command to console, passes response back using string change event
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.ParseConsoleResponse(System.String,System.String,System.String,System.String)">
            <summary>
            private method to parse console messages
            </summary>
            <param name="data"></param>
            <param name="line"></param>
            <param name="dataStart"></param>
            <param name="dataEnd"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.OnBoolChange(System.Boolean,System.UInt16,System.UInt16)">
            <summary>
            Protected boolean change event handler
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.OnStringChange(System.String,System.UInt16,System.UInt16)">
            <summary>
            Protected string change event handler
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.OnProcessorChange(PepperDash.Core.SystemInfo.ProcessorInfo,System.UInt16,System.UInt16)">
            <summary>
            Protected processor config change event handler
            </summary>
            <param name="processor"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.OnEthernetInfoChange(PepperDash.Core.SystemInfo.EthernetInfo,System.UInt16,System.UInt16)">
            <summary>
            Ethernet change event handler
            </summary>
            <param name="ethernet"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.OnControlSubnetInfoChange(PepperDash.Core.SystemInfo.ControlSubnetInfo,System.UInt16,System.UInt16)">
            <summary>
            Control Subnet change event handler
            </summary>
            <param name="ethernet"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.SystemInfoToSimpl.OnProgramChange(PepperDash.Core.SystemInfo.ProgramInfo,System.UInt16,System.UInt16)">
            <summary>
            Program change event handler
            </summary>
            <param name="program"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="E:PepperDash.Core.SystemInfo.SystemInfoToSimpl.BoolChange">
            <summary>
            Notifies of bool change
            </summary>
        </member>
        <member name="E:PepperDash.Core.SystemInfo.SystemInfoToSimpl.StringChange">
            <summary>
            Notifies of string change
            </summary>
        </member>
        <member name="E:PepperDash.Core.SystemInfo.SystemInfoToSimpl.ProcessorChange">
            <summary>
            Notifies of processor change
            </summary>
        </member>
        <member name="E:PepperDash.Core.SystemInfo.SystemInfoToSimpl.EthernetChange">
            <summary>
            Notifies of ethernet change
            </summary>
        </member>
        <member name="E:PepperDash.Core.SystemInfo.SystemInfoToSimpl.ControlSubnetChange">
            <summary>
            Notifies of control subnet change
            </summary>
        </member>
        <member name="E:PepperDash.Core.SystemInfo.SystemInfoToSimpl.ProgramChange">
            <summary>
            Notifies of program change
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient">
            <summary>
            Generic RESTful communication class
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient.SubmitRequest(System.String,System.UInt16,System.UInt16,System.String,System.String,System.String)">
            <summary>
            Generic RESTful submit request
            </summary>
            <param name="url"></param>
            <param name="port"></param>
            <param name="requestType"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient.SubmitRequestHttp(System.String,System.UInt16,System.UInt16,System.String,System.String,System.String)">
            <summary>
            Private HTTP submit request
            </summary>
            <param name="url"></param>
            <param name="port"></param>
            <param name="requestType"></param>
            <param name="contentType"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient.SubmitRequestHttps(System.String,System.UInt16,System.UInt16,System.String,System.String,System.String)">
            <summary>
            Private HTTPS submit request
            </summary>
            <param name="url"></param>
            <param name="port"></param>
            <param name="requestType"></param>
            <param name="contentType"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient.EncodeBase64(System.String,System.String)">
            <summary>
            Private method to encode username and password to Base64 string
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns>authorization</returns>
        </member>
        <member name="M:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient.OnBoolChange(System.Boolean,System.UInt16,System.UInt16)">
            <summary>
            Protected method to handle boolean change events
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient.OnUshrtChange(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Protected mehtod to handle ushort change events
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient.OnStringChange(System.String,System.UInt16,System.UInt16)">
            <summary>
            Protected method to handle string change events
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="E:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient.BoolChange">
            <summary>
            Boolean event handler
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient.UshrtChange">
            <summary>
            Ushort event handler
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulClient.StringChange">
            <summary>
            String event handler
            </summary>
        </member>
        <member name="T:PepperDash.Core.Intersystem.Tokens.XSigDigitalToken">
            <summary>
            Represents an XSigDigitalToken
            </summary>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigDigitalToken.#ctor(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigDigitalToken.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigDigitalToken.GetTokenWithOffset(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigDigitalToken.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigDigitalToken.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="P:PepperDash.Core.Intersystem.Tokens.XSigDigitalToken.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.Intersystem.Tokens.XSigDigitalToken.TokenType">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase">
            <summary>
            Base class for JSON objects
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.Master">
            <summary>
            Reference to Master instance
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.BoolPaths">
            <summary>
            Paths to boolean values in JSON structure
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.UshortPaths">
            <summary>
            Paths to numeric values in JSON structure
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.StringPaths">
            <summary>
            Paths to string values in JSON structure
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.Initialize(System.String,System.String,System.String,System.String)">
            <summary>
            Call this before doing anything else
            </summary>
            <param name="masterUniqueId"></param>
            <param name="key"></param>
            <param name="pathPrefix"></param>
            <param name="pathSuffix"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.SetPathPrefix(System.String)">
            <summary>
            Sets the path prefix for the object
            </summary>
            <param name="pathPrefix"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.SetBoolPath(System.UInt16,System.String)">
            <summary>
            Set the JPath to evaluate for a given bool out index.
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.SetUshortPath(System.UInt16,System.String)">
            <summary>
            Set the JPath for a ushort out index.
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.SetStringPath(System.UInt16,System.String)">
            <summary>
            Set the JPath for a string output index. 
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.ProcessAll">
            <summary>
            Evalutates all outputs with defined paths. called by S+ when paths are ready to process
            and by Master when file is read.
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.ProcessBoolPath(System.UInt16)">
            <summary>
            Processes a bool property, converting to bool, firing off a BoolChange event
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.Process(System.String,System.String@)">
            <summary>
            Processes the given path. 
            </summary>
            <param name="path">JPath formatted path to the desired property</param>
            <param name="response">The string value of the property, or a default value if it 
            doesn't exist</param>
            <returns> This will return false in the case that EvaulateAllOnJsonChange
            is false and the path does not evaluate to a property in the incoming JSON. </returns>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.UpdateInputsForMaster">
            <summary>
            Called from Master to read inputs and update their values in master JObject
            Callback should hit one of the following four methods
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.USetBoolValue(System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="theValue"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.SetBoolValue(System.UInt16,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="theValue"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.SetUShortValue(System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="theValue"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.SetStringValue(System.UInt16,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="theValue"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.SetValueOnMaster(System.String,Newtonsoft.Json.Linq.JValue)">
            <summary>
            
            </summary>
            <param name="keyPath"></param>
            <param name="valueToSave"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.GetFullPath(System.String)">
            <summary>
            Called during Process(...) to get the path to a given property. By default, 
            returns PathPrefix+path+PathSuffix.  Override to change the way path is built.
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.OnBoolChange(System.Boolean,System.UInt16,System.UInt16)">
            <summary>
            Event helper
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.OnUShortChange(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Event helper
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.OnStringChange(System.String,System.UInt16,System.UInt16)">
            <summary>
            Event helper
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="E:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.BoolChange">
            <summary>
            Notifies of bool change
            </summary>
        </member>
        <member name="E:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.UShortChange">
            <summary>
            Notifies of ushort change
            </summary>
        </member>
        <member name="E:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.StringChange">
            <summary>
            Notifies of string change
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.GetAllValuesDelegate">
            <summary>
            Delegate to get all values
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.SetAllPathsDelegate">
            <summary>
            Use a callback to reduce task switch/threading
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.Key">
            <summary>
            Unique identifier for instance
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.PathPrefix">
            <summary>
            This will be prepended to all paths to allow path swapping or for more organized
            sub-paths
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.PathSuffix">
            <summary>
            This is added to the end of all paths
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase.LinkedToObject">
            <summary>
            Indicates if the instance is linked to an object
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.JsonToSimplArrayLookupChild">
            <summary>
            Used to interact with an array of values with the S+ modules
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplArrayLookupChild.Initialize(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            For gt2.4.1 array lookups
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <param name="pathPrefix"></param>
            <param name="pathSuffix"></param>
            <param name="searchPropertyName"></param>
            <param name="searchPropertyValue"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplArrayLookupChild.InitializeWithAppend(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            For newer >=2.4.1 array lookups. 
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <param name="pathPrefix"></param>
            <param name="pathAppend"></param>
            <param name="pathSuffix"></param>
            <param name="searchPropertyName"></param>
            <param name="searchPropertyValue"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplArrayLookupChild.GetFullPath(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplArrayLookupChild.ProcessAll">
            <summary>
            Process all values
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplArrayLookupChild.GetPathAppend(System.String)">
            <summary>
            Provides the path append for GetFullPath
            </summary>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplArrayLookupChild.FindInArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplArrayLookupChild.SearchPropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplArrayLookupChild.SearchPropertyValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.Intersystem.Serialization.IXSigSerialization">
            <summary>
            Interface to determine XSig serialization for an object.
            </summary>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Serialization.IXSigSerialization.Serialize">
            <summary>
            Serialize the sig data
            </summary>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Serialization.IXSigSerialization.Deserialize``1(System.Collections.Generic.IEnumerable{PepperDash.Core.Intersystem.Tokens.XSigToken})">
            <summary>
            Deserialize the sig data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="T:PepperDash.Core.NetworkComm">
            <summary>
            Not in use
            </summary>
        </member>
        <member name="M:PepperDash.Core.NetworkComm.#cctor">
            <summary>
            Not in use
            </summary>
        </member>
        <member name="T:PepperDash.Core.eControlMethod">
            <summary>
            Crestron Control Methods for a comm object
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.Com">
            <summary>
            RS232/422/485
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.IpId">
            <summary>
            Crestron IpId (most Crestron ethernet devices)
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.IpidTcp">
            <summary>
            Crestron IpIdTcp (HD-MD series, etc.)
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.IR">
            <summary>
            Crestron IR control
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.Ssh">
            <summary>
            SSH client
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.Tcpip">
            <summary>
            TCP/IP client
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.Telnet">
            <summary>
            Telnet
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.Cresnet">
            <summary>
            Crestnet device
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.Cec">
            <summary>
            CEC Control, via a DM HDMI port
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.Udp">
            <summary>
            UDP Server
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.Http">
            <summary>
            HTTP client
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.Https">
            <summary>
            HTTPS client
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.Ws">
            <summary>
            Websocket client
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.Wss">
            <summary>
            Secure Websocket client 
            </summary>
        </member>
        <member name="F:PepperDash.Core.eControlMethod.SecureTcpIp">
            <summary>
            Secure TCP/IP
            </summary>
        </member>
        <member name="T:PepperDash.Core.SystemInfo.ProcessorInfo">
            <summary>
            Processor info class
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ProcessorInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorInfo.Model">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorInfo.SerialNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorInfo.Firmware">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorInfo.FirmwareDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorInfo.OsVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorInfo.RuntimeEnvironment">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorInfo.DevicePlatform">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorInfo.ModuleDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorInfo.LocalTimeZone">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProcessorInfo.ProgramIdTag">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.SystemInfo.EthernetInfo">
            <summary>
            Ethernet info class
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.EthernetInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetInfo.DhcpIsOn">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetInfo.Hostname">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetInfo.MacAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetInfo.IpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetInfo.Subnet">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetInfo.Gateway">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetInfo.Dns1">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetInfo.Dns2">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetInfo.Dns3">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.EthernetInfo.Domain">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.SystemInfo.ControlSubnetInfo">
            <summary>
            Control subnet info class
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ControlSubnetInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ControlSubnetInfo.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ControlSubnetInfo.IsInAutomaticMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ControlSubnetInfo.MacAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ControlSubnetInfo.IpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ControlSubnetInfo.Subnet">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ControlSubnetInfo.RouterPrefix">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.SystemInfo.ProgramInfo">
            <summary>
            Program info class
            </summary>
        </member>
        <member name="M:PepperDash.Core.SystemInfo.ProgramInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProgramInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProgramInfo.Header">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProgramInfo.System">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProgramInfo.ProgramIdTag">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProgramInfo.CompileTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProgramInfo.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProgramInfo.Environment">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.SystemInfo.ProgramInfo.Programmer">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.Debug">
            <summary>
            Contains debug commands for use in various situations
            </summary>
        </member>
        <member name="F:PepperDash.Core.Debug.OldFilePathPrefix">
            <summary>
            Describes the folder location where a given program stores it's debug level memory. By default, the
            file written will be named appNdebug where N is 1-10.
            </summary>
        </member>
        <member name="F:PepperDash.Core.Debug.NewFilePathPrefix">
            <summary>
            Describes the new folder location where a given program stores it's debug level memory. By default, the
            file written will be named appNdebug where N is 1-10.
            </summary>
        </member>
        <member name="F:PepperDash.Core.Debug.FileName">
            <summary>
            The name of the file containing the current debug settings.
            </summary>
        </member>
        <member name="F:PepperDash.Core.Debug._excludeAllMode">
            <summary>
            When true, the IncludedExcludedKeys dict will contain keys to include. 
            When false (default), IncludedExcludedKeys will contain keys to exclude.
            </summary>
        </member>
        <member name="M:PepperDash.Core.Debug.CrestronEnvironment_ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Used to save memory when shutting down
            </summary>
            <param name="programEventType"></param>
        </member>
        <member name="M:PepperDash.Core.Debug.SetDebugFromConsole(System.String)">
            <summary>
            Callback for console command
            </summary>
            <param name="levelString"></param>
        </member>
        <member name="M:PepperDash.Core.Debug.SetDoNotLoadOnNextBootFromConsole(System.String)">
            <summary>
            Callback for console command
            </summary>
            <param name="stateString"></param>
        </member>
        <member name="M:PepperDash.Core.Debug.SetDebugFilterFromConsole(System.String)">
            <summary>
            Callback for console command
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:PepperDash.Core.Debug.SetDebugLevel(System.Int32)">
            <summary>
            Sets the debug level
            </summary>
            <param name="level"> Valid values 0 (no debug), 1 (critical), 2 (all messages)</param>
        </member>
        <member name="M:PepperDash.Core.Debug.SetDeviceDebugSettings(System.String,System.Object)">
            <summary>
            sets the settings for a device or creates a new entry
            </summary>
            <param name="deviceKey"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Debug.GetDeviceDebugSettingsForKey(System.String)">
            <summary>
            Gets the device settings for a device by key or returns null
            </summary>
            <param name="deviceKey"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Debug.SetDoNotLoadOnNextBoot(System.Boolean)">
            <summary>
            Sets the flag to prevent application starting on next boot
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:PepperDash.Core.Debug.ShowDebugLog(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.Debug.Console(System.UInt32,System.String,System.Object[])">
            <summary>
            Prints message to console if current debug level is equal to or higher than the level of this message.
            Uses CrestronConsole.PrintLine.
            </summary>
            <param name="level"></param>
            <param name="format">Console format string</param>
            <param name="items">Object parameters</param>
        </member>
        <member name="M:PepperDash.Core.Debug.Console(System.UInt32,PepperDash.Core.IKeyed,System.String,System.Object[])">
            <summary>
            Logs to Console when at-level, and all messages to error log, including device key			
            </summary>
        </member>
        <member name="M:PepperDash.Core.Debug.Console(System.UInt32,PepperDash.Core.IKeyed,PepperDash.Core.Debug.ErrorLogLevel,System.String,System.Object[])">
            <summary>
            Prints message to console if current debug level is equal to or higher than the level of this message. Always sends message to Error Log.
            Uses CrestronConsole.PrintLine.
            </summary>
        </member>
        <member name="M:PepperDash.Core.Debug.Console(System.UInt32,PepperDash.Core.Debug.ErrorLogLevel,System.String,System.Object[])">
            <summary>
            Logs to Console when at-level, and all messages to error log
            </summary>
        </member>
        <member name="M:PepperDash.Core.Debug.ConsoleWithLog(System.UInt32,System.String,System.Object[])">
            <summary>
            Logs to both console and the custom user log (not the built-in error log). If appdebug level is set at
            or above the level provided, then the output will be written to both console and the log. Otherwise
            it will only be written to the log.
            </summary>
        </member>
        <member name="M:PepperDash.Core.Debug.ConsoleWithLog(System.UInt32,PepperDash.Core.IKeyed,System.String,System.Object[])">
            <summary>
            Logs to both console and the custom user log (not the built-in error log). If appdebug level is set at
            or above the level provided, then the output will be written to both console and the log. Otherwise
            it will only be written to the log.
            </summary>
        </member>
        <member name="M:PepperDash.Core.Debug.LogError(PepperDash.Core.Debug.ErrorLogLevel,System.String)">
            <summary>
            Prints to log and error log
            </summary>
            <param name="errorLogLevel"></param>
            <param name="str"></param>
        </member>
        <member name="M:PepperDash.Core.Debug.SaveMemoryOnTimeout">
            <summary>
            Writes the memory object after timeout
            </summary>
        </member>
        <member name="M:PepperDash.Core.Debug.SaveMemory">
            <summary>
            Writes the memory - use SaveMemoryOnTimeout
            </summary>
        </member>
        <member name="M:PepperDash.Core.Debug.LoadMemory">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.Debug.GetMemoryFileName">
            <summary>
            Helper to get the file path for this app's debug memory
            </summary>
        </member>
        <member name="P:PepperDash.Core.Debug.Level">
            <summary>
            Debug level to set for a given program.
            </summary>
        </member>
        <member name="P:PepperDash.Core.Debug.DoNotLoadOnNextBoot">
            <summary>
            When this is true, the configuration file will NOT be loaded until triggered by either a console command or a signal
            </summary>
        </member>
        <member name="P:PepperDash.Core.Debug.PepperDashCoreVersion">
            <summary>
            Version for the currently loaded PepperDashCore dll
            </summary>
        </member>
        <member name="T:PepperDash.Core.Debug.ErrorLogLevel">
            <summary>
            Error level to for message to be logged at
            </summary>
        </member>
        <member name="F:PepperDash.Core.Debug.ErrorLogLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:PepperDash.Core.Debug.ErrorLogLevel.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:PepperDash.Core.Debug.ErrorLogLevel.Notice">
            <summary>
            Notice
            </summary>
        </member>
        <member name="F:PepperDash.Core.Debug.ErrorLogLevel.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:PepperDash.Core.Config.PortalConfigReader">
            <summary>
            Reads a Portal formatted config file
            </summary>
        </member>
        <member name="M:PepperDash.Core.Config.PortalConfigReader.ReadAndMergeFileIfNecessary(System.String,System.String)">
            <summary>
            Reads the config file, checks if it needs a merge, merges and saves, then returns the merged Object.
            </summary>
            <returns>JObject of config file</returns>
        </member>
        <member name="M:PepperDash.Core.Config.PortalConfigReader.MergeConfigs(Newtonsoft.Json.Linq.JObject)">
            <summary>
            
            </summary>
            <param name="doubleConfig"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Config.PortalConfigReader.MergeArraysOnTopLevelProperty(Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray,System.String,System.String)">
            <summary>
            Merges the contents of a base and a delta array, matching the entries on a top-level property
            given by propertyName.  Returns a merge of them. Items in the delta array that do not have
            a matched item in base array will not be merged. Non keyed system items will replace the template items.
            </summary>
        </member>
        <member name="M:PepperDash.Core.Config.PortalConfigReader.Merge(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Helper for using with JTokens.  Converts to JObject 
            </summary>
        </member>
        <member name="M:PepperDash.Core.Config.PortalConfigReader.Merge(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Merge o2 onto o1
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <param name="path"></param>
        </member>
        <member name="T:PepperDash.Core.Intersystem.Tokens.XSigTokenType">
            <summary>
            XSig token types.
            </summary>
        </member>
        <member name="F:PepperDash.Core.Intersystem.Tokens.XSigTokenType.Digital">
            <summary>
            Digital signal datatype.
            </summary>
        </member>
        <member name="F:PepperDash.Core.Intersystem.Tokens.XSigTokenType.Analog">
            <summary>
            Analog signal datatype.
            </summary>
        </member>
        <member name="F:PepperDash.Core.Intersystem.Tokens.XSigTokenType.Serial">
            <summary>
            Serial signal datatype.
            </summary>
        </member>
        <member name="T:PepperDash.Core.PasswordManagement.PasswordClient">
            <summary>
            A class to allow user interaction with the PasswordManager
            </summary>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordClient.Initialize">
            <summary>
            Initialize method
            </summary>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordClient.GetPasswordByIndex(System.UInt16)">
            <summary>
            Retrieve password by index
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordClient.ValidatePassword(System.String)">
            <summary>
            Password validation method
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordClient.BuildPassword(System.String)">
            <summary>
            Builds the user entered passwrod string, will attempt to validate the user entered
            password against the selected password when the length of the 2 are equal
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordClient.ClearPassword">
            <summary>
            Clears the user entered password and resets the LEDs
            </summary>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordClient.OnBoolChange(System.Boolean,System.UInt16,System.UInt16)">
            <summary>
            Protected boolean change event handler
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordClient.OnUshrtChange(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Protected ushort change event handler
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordClient.OnStringChange(System.String,System.UInt16,System.UInt16)">
            <summary>
            Protected string change event handler
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordClient.PasswordManager_PasswordChange(System.Object,PepperDash.Core.StringChangeEventArgs)">
            <summary>
            If password changes while selected change event will be notifed and update the client
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="P:PepperDash.Core.PasswordManagement.PasswordClient.Password">
            <summary>
            Password selected
            </summary>
        </member>
        <member name="P:PepperDash.Core.PasswordManagement.PasswordClient.Key">
            <summary>
            Password selected key
            </summary>
        </member>
        <member name="P:PepperDash.Core.PasswordManagement.PasswordClient.PasswordToValidate">
            <summary>
            Used to build the password entered by the user
            </summary>
        </member>
        <member name="E:PepperDash.Core.PasswordManagement.PasswordClient.BoolChange">
            <summary>
            Boolean event 
            </summary>
        </member>
        <member name="E:PepperDash.Core.PasswordManagement.PasswordClient.UshrtChange">
            <summary>
            Ushort event
            </summary>
        </member>
        <member name="E:PepperDash.Core.PasswordManagement.PasswordClient.StringChange">
            <summary>
            String event
            </summary>
        </member>
        <member name="T:PepperDash.Core.PasswordManagement.PasswordConfig">
            <summary>
            JSON password configuration 
            </summary>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.PasswordManagement.PasswordConfig.password">
            <summary>
            Password object configured password
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.JsonToSimplFileMaster">
            <summary>
            Represents a JSON file that can be read and written to
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.JsonToSimplMaster">
            <summary>
            Abstract base class for JsonToSimpl interactions
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.Children">
            <summary>
            A collection of associated child modules
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.UnsavedValues">
            Privates *
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.#ctor">
            <summary>
            SIMPL+ default constructor.
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.Initialize(System.String)">
            <summary>
            Sets up class - overriding methods should always call this.
            </summary>
            <param name="uniqueId"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.AddChild(PepperDash.Core.JsonToSimpl.JsonToSimplChildObjectBase)">
            <summary>
            Adds a child "module" to this master
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.AddUnsavedValue(System.String,Newtonsoft.Json.Linq.JValue)">
            <summary>
            Called from the child to add changed or new values for saving
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.Save">
            <summary>
            Saves the file
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.OnBoolChange(System.Boolean,System.UInt16,System.UInt16)">
            <summary>
            Helper event
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.OnUshrtChange(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Helper event
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.OnStringChange(System.String,System.UInt16,System.UInt16)">
            <summary>
            Helper event
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="E:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.BoolChange">
            <summary>
            Notifies of bool change
            </summary>
        </member>
        <member name="E:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.UshrtChange">
            <summary>
            Notifies of ushort change
            </summary>
        </member>
        <member name="E:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.StringChange">
            <summary>
            Notifies of string change
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.Key">
            <summary>
            Mirrors the Unique ID for now.
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.UniqueID">
            <summary>
            A unique ID
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.DebugName">
            <summary>
            Merely for use in debug messages
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.PathPrefix">
            <summary>
            This will be prepended to all paths to allow path swapping or for more organized
            sub-paths
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.PathSuffix">
            <summary>
            This is added to the end of all paths
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.DebugOn">
            <summary>
            Enables debugging output to the console.  Certain error messages will be logged to the 
            system's error log regardless of this setting
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.UDebug">
            <summary>
            Ushort helper for Debug property
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.JsonObject">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.JsonFixes">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.JsonFixes.ParseObject(System.String)">
            <summary>
            Deserializes a string into a JObject
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplMaster.JsonFixes.ParseArray(System.String)">
            <summary>
            Deserializes a string into a JArray
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplFileMaster.StringBuilderLock">
            Privates *
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplFileMaster.#ctor">
            <summary>
            SIMPL+ default constructor.
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplFileMaster.EvaluateFile(System.String)">
            <summary>
            Read, evaluate and udpate status
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplFileMaster.setDebugLevel(System.Int32)">
            <summary>
            Sets the debug level
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplFileMaster.Save">
            <summary>
            Saves the values to the file
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplFileMaster.Filepath">
            <summary>
             Sets the filepath as well as registers this with the Global.Masters list
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplFileMaster.ActualFilePath">
            <summary>
            Filepath to the actual file that will be read (Portal or local)
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplFileMaster.Filename">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplFileMaster.FilePathName">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.JsonToSimplPortalFileMaster">
            <summary>
            Portal File Master
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplPortalFileMaster.StringBuilderLock">
            Privates *
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplPortalFileMaster.#ctor">
            <summary>
            SIMPL+ default constructor.
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplPortalFileMaster.EvaluateFile(System.String)">
            <summary>
            Read, evaluate and udpate status
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplPortalFileMaster.GetActualFileInfoFromPath(System.String)">
            <summary>
            Returns the FileInfo object for a given path, with possible wildcards
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplPortalFileMaster.setDebugLevel(System.Int32)">
            <summary>
            
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplPortalFileMaster.Save">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplPortalFileMaster.PortalFilepath">
            <summary>
             Sets the filepath as well as registers this with the Global.Masters list
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplPortalFileMaster.ActualFilePath">
            <summary>
            File path of the actual file being read (Portal or local)
            </summary>
        </member>
        <member name="T:PepperDash.Core.TcpClientConfigObject">
            <summary>
            Client config object for TCP client with server that inherits from TcpSshPropertiesConfig and adds properties for shared key and heartbeat
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpClientConfigObject.Control">
            <summary>
            TcpSsh Properties 
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpClientConfigObject.Secure">
            <summary>
            Bool value for secure. Currently not implemented in TCP sockets as they are not dynamic
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpClientConfigObject.SharedKeyRequired">
            <summary>
            Require a shared key that both server and client negotiate. If negotiation fails server disconnects the client
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpClientConfigObject.SharedKey">
            <summary>
            The shared key that must match on the server and client
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpClientConfigObject.HeartbeatRequired">
            <summary>
            Require a heartbeat on the client/server connection that will cause the server/client to disconnect if the heartbeat is not received. 
            heartbeats do not raise received events. 
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpClientConfigObject.HeartbeatRequiredIntervalInSeconds">
            <summary>
            The interval in seconds for the heartbeat from the client. If not received client is disconnected
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpClientConfigObject.HeartbeatStringToMatch">
            <summary>
            HeartbeatString that will be checked against the message received. defaults to heartbeat if no string is provided. 
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpClientConfigObject.ReceiveQueueSize">
            <summary>
            Receive Queue size must be greater than 20 or defaults to 20
            </summary>
        </member>
        <member name="T:PepperDash.Core.QscCoreDoubleTcpIpClient">
            <summary>
            Allows for two simultaneous TCP clients to connect to a redundant pair of QSC Core DSPs and manages 
            </summary>
        </member>
        <member name="F:PepperDash.Core.QscCoreDoubleTcpIpClient.MasterIsActiveId">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.QscCoreDoubleTcpIpClient.SlaveIsActiveId">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.QscCoreDoubleTcpIpClient.MainModuleInitiailzeId">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.QscCoreDoubleTcpIpClient.MasterClientStatusId">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.QscCoreDoubleTcpIpClient.SlaveClientStatusId">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.QscCoreDoubleTcpIpClient.LineReceivedId">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.QscCoreDoubleTcpIpClient.#ctor">
            <summary>
            Default constuctor for S+
            </summary>
        </member>
        <member name="M:PepperDash.Core.QscCoreDoubleTcpIpClient.Connect(System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Connects to both DSP units
            </summary>
            <param name="key"></param>
            <param name="masterAddress"></param>
            <param name="masterPort"></param>
            <param name="slaveAddress"></param>
            <param name="slavePort"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="pollingIntervalSeconds"></param>
            <param name="lineEnding"></param>
        </member>
        <member name="M:PepperDash.Core.QscCoreDoubleTcpIpClient.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.QscCoreDoubleTcpIpClient.SendText(System.String)">
            <summary>
            Does not include line feed
            </summary>
        </member>
        <member name="P:PepperDash.Core.QscCoreDoubleTcpIpClient.Key">
            <summary>
            Key to uniquely identify the instance of the class
            </summary>
        </member>
        <member name="E:PepperDash.Core.QscCoreDoubleTcpIpClient.BoolChange">
            <summary>
            Fires when a bool value changes to notify the S+ module
            </summary>
        </member>
        <member name="E:PepperDash.Core.QscCoreDoubleTcpIpClient.UshortChange">
            <summary>
            Fires when a ushort value changes to notify the S+ module
            </summary>
        </member>
        <member name="E:PepperDash.Core.QscCoreDoubleTcpIpClient.StringChange">
            <summary>
            Fires when a string value changes to notify the S+ module
            </summary>
        </member>
        <member name="P:PepperDash.Core.QscCoreDoubleTcpIpClient.MasterClient">
            <summary>
            The client for the master DSP unit
            </summary>
        </member>
        <member name="P:PepperDash.Core.QscCoreDoubleTcpIpClient.SlaveClient">
            <summary>
            The client for the slave DSP unit
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericSecureTcpIpClient">
            <summary>
            A class to handle secure TCP/IP communications with a server
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient._client">
            <summary>
            Internal secure client
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient.DisconnectCalledByUser">
            <summary>
            Flag Set only when the disconnect method is called.
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient.IsTryingToConnect">
            <summary>
            Semaphore on connect method
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient.DequeueLock">
            <summary>
            Queue lock
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient.MessageQueue">
            <summary>
            Queue to temporarily store received messages with the source IP and Port info. Defaults to size 20. Use constructor or set queue size property before
            calling initialize. 
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="key"></param>
            <param name="address"></param>
            <param name="port"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.#ctor(System.String,PepperDash.Core.TcpClientConfigObject)">
            <summary>
            Contstructor that sets all properties by calling the initialize method with a config object. 
            </summary>        
            <param name="key"></param>
            <param name="clientConfigObject"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.#ctor">
            <summary>
            Default constructor for S+
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.Initialize(System.String)">
            <summary>
            Just to help S+ set the key
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.Initialize(PepperDash.Core.TcpClientConfigObject)">
            <summary>
            Initialize called by the constructor that accepts a client config object. Can be called later to reset properties of client. 
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.CrestronEnvironment_ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Handles closing this up when the program shuts down
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.Deactivate">
            <summary>
            Deactivate the client
            </summary>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.Connect">
            <summary>
            Connect Method. Will return if already connected. Will write errors if missing address, port, or unique key/name.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.DisconnectClient">
            <summary>
            Does the actual disconnect business
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.CheckClosedAndTryReconnect">
            <summary>
            Called from Connect failure or Socket Status change if 
            auto reconnect and socket disconnected (Not disconnected by user)
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.Receive(Crestron.SimplSharp.CrestronSockets.SecureTCPClient,System.Int32)">
            <summary>
            Receive callback
            </summary>
            <param name="client"></param>
            <param name="numBytes"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.DequeueEvent">
            <summary>
            This method gets spooled up in its own thread an protected by a CCriticalSection to prevent multiple threads from running concurrently.
            It will dequeue items as they are enqueued automatically.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.StopWaitForSharedKeyTimer">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.SendText(System.String)">
            <summary>
            General send method
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.SendBytes(System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.Client_SocketStatusChange(Crestron.SimplSharp.CrestronSockets.SecureTCPClient,Crestron.SimplSharp.CrestronSockets.SocketStatus)">
            <summary>
            SocketStatusChange Callback 
            </summary>
            <param name="client"></param>
            <param name="clientSocketStatus"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.OnConnectionChange">
            <summary>
            Helper for ConnectionChange event
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient.OnClientReadyForcommunications(System.Boolean)">
            <summary>
            Helper to fire ClientReadyForCommunications event
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.StreamDebugging">
            <summary>
            Stream debugging 
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpClient.BytesReceived">
            <summary>
            Fires when data is received from the server and returns it as a Byte array
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpClient.TextReceived">
            <summary>
            Fires when data is received from the server and returns it as text
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpClient.ConnectionChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpClient.AutoReconnectTriggered">
            <summary>
            Auto reconnect evant handler
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpClient.TextReceivedQueueInvoke">
            <summary>
            Event for Receiving text. Once subscribed to this event the receive callback will start a thread that dequeues the messages and invokes the event on a new thread. 
            It is not recommended to use both the TextReceived event and the TextReceivedQueueInvoke event. 
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpClient.ClientReadyForCommunications">
            <summary>
            For a client with a pre shared key, this will fire after the communication is established and the key exchange is complete. If you require
            a key and subscribe to the socket change event and try to send data on a connection the data sent will interfere with the key exchange and disconnect.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.Hostname">
            <summary>
            Address of server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.Port">
            <summary>
            Port on server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.UPort">
            <summary>
            S+ helper
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.BufferSize">
            <summary>
            Defaults to 2000
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.IsConnected">
            <summary>
            Bool showing if socket is connected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.UIsConnected">
            <summary>
            S+ helper for IsConnected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.ClientStatus">
            <summary>
            _client socket status Read only
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.UStatus">
            <summary>
            Contains the familiar Simpl analog status values. This drives the ConnectionChange event
            and IsConnected would be true when this == 2.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.ClientStatusText">
            <summary>
            Status text shows the message associated with socket status
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.ConnectionFailure">
            <summary>
            Connection failure reason
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.AutoReconnect">
            <summary>
            bool to track if auto reconnect should be set on the socket
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.UAutoReconnect">
            <summary>
            S+ helper for AutoReconnect
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.AutoReconnectIntervalMs">
            <summary>
            Milliseconds to wait before attempting to reconnect. Defaults to 5000
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.Connected">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.SharedKeyRequired">
            <summary>
            Bool to show whether the server requires a preshared key. This is used in the DynamicTCPServer class
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.USharedKeyRequired">
            <summary>
            S+ helper for requires shared key bool
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.SharedKey">
            <summary>
            SharedKey is sent for varification to the server. Shared key can be any text (255 char limit in SIMPL+ Module), but must match the Shared Key on the Server module
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.WaitingForSharedKeyResponse">
            <summary>
            flag to show the client is waiting for the server to send the shared key
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.IsReadyForCommunication">
            <summary>
            Bool showing if socket is ready for communication after shared key exchange
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.UIsReadyForCommunication">
            <summary>
            S+ helper for IsReadyForCommunication
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.HeartbeatEnabled">
            <summary>
            Bool Heartbeat Enabled flag
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.UHeartbeatEnabled">
            <summary>
            S+ helper for Heartbeat Enabled
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.HeartbeatString">
            <summary>
            Heartbeat String
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.HeartbeatInterval">
            <summary>
            Milliseconds before server expects another heartbeat. Set by property HeartbeatRequiredIntervalInSeconds which is driven from S+
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.HeartbeatRequiredIntervalInSeconds">
            <summary>
            Simpl+ Heartbeat Analog value in seconds
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient.ReceiveQueueSize">
            <summary>
            Receive Queue size. Defaults to 20. Will set to 20 if QueueSize property is less than 20. Use constructor or set queue size property before
            calling initialize. 
            </summary>
        </member>
        <member name="T:PepperDash.Core.IBasicCommunicationWithStreamDebugging">
            <summary>
            Represents a device that implements IBasicCommunication and IStreamDebugging
            </summary>
        </member>
        <member name="T:PepperDash.Core.eGenericCommMethodStatusChangeType">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.eGenericCommMethodStatusChangeType.Connected">
            <summary>
            Connected
            </summary>
        </member>
        <member name="F:PepperDash.Core.eGenericCommMethodStatusChangeType.Disconnected">
            <summary>
            Disconnected
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericCommMethodStatusHandler">
            <summary>
            This delegate defines handler for IBasicCommunication status changes
            </summary>
            <param name="comm">Device firing the status change</param>
            <param name="status"></param>
        </member>
        <member name="T:PepperDash.Core.GenericCommMethodReceiveBytesArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericCommMethodReceiveBytesArgs.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:PepperDash.Core.GenericCommMethodReceiveBytesArgs.#ctor">
            <summary>
            S+ Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericCommMethodReceiveBytesArgs.Bytes">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericCommMethodReceiveTextArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericCommMethodReceiveTextArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:PepperDash.Core.GenericCommMethodReceiveTextArgs.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="delimiter"></param>
        </member>
        <member name="M:PepperDash.Core.GenericCommMethodReceiveTextArgs.#ctor">
            <summary>
            S+ Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericCommMethodReceiveTextArgs.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericCommMethodReceiveTextArgs.Delimiter">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.ComTextHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.ComTextHelper.GetEscapedText(System.Byte[])">
            <summary>
            Gets escaped text for a byte array
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.ComTextHelper.GetEscapedText(System.String)">
            <summary>
            Gets escaped text for a string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.ComTextHelper.GetDebugText(System.String)">
            <summary>
            Gets debug text for a string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:PepperDash.Core.Intersystem.Tokens.XSigSerialToken">
            <summary>
            Represents an XSigSerialToken
            </summary>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigSerialToken.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigSerialToken.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigSerialToken.GetTokenWithOffset(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Tokens.XSigSerialToken.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:PepperDash.Core.Intersystem.Tokens.XSigSerialToken.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.Intersystem.Tokens.XSigSerialToken.TokenType">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.EthernetHelper">
            <summary>
            Class to help with accessing values from the CrestronEthernetHelper class 
            </summary>
        </member>
        <member name="P:PepperDash.Core.EthernetHelper.LanHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.EthernetHelper.PortNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.EthernetHelper.LinkActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.EthernetHelper.DhcpActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.EthernetHelper.Hostname">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.EthernetHelper.IPAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.EthernetHelper.SubnetMask">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.EthernetHelper.DefaultGateway">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.DebugThings.DebugContextCollection">
            <summary>
            Class to persist current Debug settings across program restarts
            </summary>
        </member>
        <member name="F:PepperDash.Core.DebugThings.DebugContextCollection._deviceDebugSettingsLock">
            <summary>
            To prevent threading issues with the DeviceDebugSettings collection
            </summary>
        </member>
        <member name="M:PepperDash.Core.DebugThings.DebugContextCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.DebugThings.DebugContextCollection.SetLevel(System.String,System.Int32)">
            <summary>
            Sets the level of a given context item, and adds that item if it does not 
            exist
            </summary>
            <param name="contextKey"></param>
            <param name="level"></param>
        </member>
        <member name="M:PepperDash.Core.DebugThings.DebugContextCollection.GetOrCreateItem(System.String)">
            <summary>
            Gets a level or creates it if not existing
            </summary>
            <param name="contextKey"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.DebugThings.DebugContextCollection.SetDebugSettingsForKey(System.String,System.Object)">
            <summary>
            sets the settings for a device or creates a new entry
            </summary>
            <param name="deviceKey"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.DebugThings.DebugContextCollection.GetDebugSettingsForKey(System.String)">
            <summary>
            Gets the device settings for a device by key or returns null
            </summary>
            <param name="deviceKey"></param>
            <returns></returns>
        </member>
        <member name="P:PepperDash.Core.DebugThings.DebugContextCollection.DeviceDebugSettings">
            <summary>
            Collection of the debug settings for each device where the dictionary key is the device key
            </summary>
        </member>
        <member name="T:PepperDash.Core.DebugThings.DebugContextItem">
            <summary>
            Contains information about 
            </summary>
        </member>
        <member name="P:PepperDash.Core.DebugThings.DebugContextItem.Level">
            <summary>
            The level of debug messages to print
            </summary>
        </member>
        <member name="P:PepperDash.Core.DebugThings.DebugContextItem.DoNotLoadOnNextBoot">
            <summary>
            Property to tell the program not to intitialize when it boots, if desired
            </summary>
        </member>
        <member name="T:PepperDash.Core.Web.WebApiServer">
            <summary>
            Web API server
            </summary>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.#ctor">
            <summary>
            Constructor for S+.  Make sure to set necessary properties using init method
            </summary>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key"></param>
            <param name="basePath"></param>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key"></param>
            <param name="name"></param>
            <param name="basePath"></param>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.CrestronEnvironment_ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Program status event handler
            </summary>
            <param name="programEventType"></param>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.CrestronEnvironment_EthernetEventHandler(Crestron.SimplSharp.EthernetEventArgs)">
            <summary>
            Ethernet event handler
            </summary>
            <param name="ethernetEventArgs"></param>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.Initialize(System.String,System.String)">
            <summary>
            Initializes CWS class
            </summary>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.AddRoute(Crestron.SimplSharp.WebScripting.HttpCwsRoute)">
            <summary>
            Adds a route to CWS
            </summary>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.RemoveRoute(Crestron.SimplSharp.WebScripting.HttpCwsRoute)">
            <summary>
            Removes a route from CWS
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.GetRouteCollection">
            <summary>
            Returns a list of the current routes
            </summary>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.Start">
            <summary>
            Starts CWS instance
            </summary>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.Stop">
            <summary>
            Stop CWS instance
            </summary>
        </member>
        <member name="M:PepperDash.Core.Web.WebApiServer.ReceivedRequestEventHandler(System.Object,Crestron.SimplSharp.WebScripting.HttpCwsRequestEventArgs)">
            <summary>
            Received request handler
            </summary>
            <remarks>
            This is here for development and testing
            </remarks>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="P:PepperDash.Core.Web.WebApiServer.Key">
            <summary>
            Web API server key
            </summary>
        </member>
        <member name="P:PepperDash.Core.Web.WebApiServer.Name">
            <summary>
            Web API server name
            </summary>
        </member>
        <member name="P:PepperDash.Core.Web.WebApiServer.BasePath">
            <summary>
            CWS base path, will default to "/api" if not set via initialize method
            </summary>
        </member>
        <member name="P:PepperDash.Core.Web.WebApiServer.IsRegistered">
            <summary>
            Indicates CWS is registered with base path
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.JsonToSimplGenericMaster">
            <summary>
            Generic Master
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplGenericMaster.StringBuilderLock">
            Privates *
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplGenericMaster.#ctor">
            <summary>
            SIMPL+ default constructor.
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplGenericMaster.LoadWithJson(System.String)">
            <summary>
            Loads in JSON and triggers evaluation on all children
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplGenericMaster.SetJsonWithoutEvaluating(System.String)">
            <summary>
            Loads JSON into JsonObject, but does not trigger evaluation by children
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplGenericMaster.Save">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.JsonToSimplGenericMaster.SaveCallback">
            <summary>
            Callback action for saving
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.JsonToSimplFixedPathObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.JsonToSimplFixedPathObject.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulConstants.BoolValueChange">
            <summary>
            Generic boolean change
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulConstants.UshrtValueChange">
            <summary>
            Generic Ushort change
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulConstants.ResponseCodeChange">
            <summary>
            Response Code Ushort change
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulConstants.StringValueChange">
            <summary>
            Generic String chagne 
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulConstants.ResponseStringChange">
            <summary>
            Response string change
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericRESTfulCommunications.GenericRESTfulConstants.ErrorStringChange">
            <summary>
            Error string change
            </summary>
        </member>
        <member name="T:PepperDash.Core.Web.RequestHandlers.DefaultRequestHandler">
            <summary>
            Web API default request handler
            </summary>
        </member>
        <member name="M:PepperDash.Core.Web.RequestHandlers.DefaultRequestHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:PepperDash.Core.WebApi.Presets.WebApiPasscodeClient">
            <summary>
            Passcode client for the WebApi
            </summary>
        </member>
        <member name="F:PepperDash.Core.WebApi.Presets.WebApiPasscodeClient.J2SMaster">
            <summary>
            An embedded JsonToSimpl master object.
            </summary>
        </member>
        <member name="M:PepperDash.Core.WebApi.Presets.WebApiPasscodeClient.#ctor">
            <summary>
            SIMPL+ can only execute the default constructor. If you have variables that require initialization, please
            use an Initialize method
            </summary>
        </member>
        <member name="M:PepperDash.Core.WebApi.Presets.WebApiPasscodeClient.Initialize(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes the instance
            </summary>
            <param name="key"></param>
            <param name="jsonMasterKey"></param>
            <param name="urlBase"></param>
            <param name="defaultPresetJsonFilePath"></param>
        </member>
        <member name="M:PepperDash.Core.WebApi.Presets.WebApiPasscodeClient.GetUserForPasscode(System.String)">
            <summary>
            Gets the user for a passcode
            </summary>
            <param name="passcode"></param>
        </member>
        <member name="M:PepperDash.Core.WebApi.Presets.WebApiPasscodeClient.GetPresetForThisUser(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="roomTypeId"></param>
            <param name="presetNumber"></param>
        </member>
        <member name="M:PepperDash.Core.WebApi.Presets.WebApiPasscodeClient.SavePresetForThisUser(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="roomTypeId"></param>
            <param name="presetNumber"></param>
        </member>
        <member name="M:PepperDash.Core.WebApi.Presets.WebApiPasscodeClient.SaveCallback(System.String)">
            <summary>
            After save operation on JSON master happens, send it to server
            </summary>
            <param name="json"></param>
        </member>
        <member name="E:PepperDash.Core.WebApi.Presets.WebApiPasscodeClient.UserReceived">
            <summary>
            Notifies when user received
            </summary>
        </member>
        <member name="E:PepperDash.Core.WebApi.Presets.WebApiPasscodeClient.PresetReceived">
            <summary>
            Notifies when Preset received
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.WebApiPasscodeClient.Key">
            <summary>
            Unique identifier for this instance
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericSocketStatusChangeEventDelegate">
            <summary>
            Delegate for notifying of socket status changes
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:PepperDash.Core.GenericSocketStatusChageEventArgs">
            <summary>
            EventArgs class for socket status changes
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSocketStatusChageEventArgs.#ctor(PepperDash.Core.ISocketStatus)">
            <summary>
            
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSocketStatusChageEventArgs.#ctor">
            <summary>
            S+ Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSocketStatusChageEventArgs.Client">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericTcpServerStateChangedEventDelegate">
            <summary>
            Delegate for notifying of TCP Server state changes
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:PepperDash.Core.GenericTcpServerStateChangedEventArgs">
            <summary>
            EventArgs class for TCP Server state changes
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpServerStateChangedEventArgs.#ctor(Crestron.SimplSharp.CrestronSockets.ServerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpServerStateChangedEventArgs.#ctor">
            <summary>
            S+ Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpServerStateChangedEventArgs.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericTcpServerSocketStatusChangeEventDelegate">
            <summary>
            Delegate for TCP Server socket status changes
            </summary>
            <param name="socket"></param>
            <param name="clientIndex"></param>
            <param name="clientStatus"></param>
        </member>
        <member name="T:PepperDash.Core.GenericTcpServerSocketStatusChangeEventArgs">
            <summary>
            EventArgs for TCP server socket status changes
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpServerSocketStatusChangeEventArgs.#ctor(System.Object,Crestron.SimplSharp.CrestronSockets.SocketStatus)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="clientStatus"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpServerSocketStatusChangeEventArgs.#ctor(System.Object,System.UInt32,Crestron.SimplSharp.CrestronSockets.SocketStatus)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="clientIndex"></param>
            <param name="clientStatus"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpServerSocketStatusChangeEventArgs.#ctor">
            <summary>
            S+ Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpServerSocketStatusChangeEventArgs.Socket">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpServerSocketStatusChangeEventArgs.ReceivedFromClientIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpServerSocketStatusChangeEventArgs.ClientStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericTcpServerCommMethodReceiveTextArgs">
            <summary>
            EventArgs for TCP server com method receive text
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpServerCommMethodReceiveTextArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpServerCommMethodReceiveTextArgs.#ctor(System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="clientIndex"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpServerCommMethodReceiveTextArgs.#ctor">
            <summary>
            S+ Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpServerCommMethodReceiveTextArgs.ReceivedFromClientIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpServerCommMethodReceiveTextArgs.ReceivedFromClientIndexShort">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpServerCommMethodReceiveTextArgs.Text">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericTcpServerClientReadyForcommunicationsEventArgs">
            <summary>
            EventArgs for TCP server client ready for communication
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpServerClientReadyForcommunicationsEventArgs.IsReady">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpServerClientReadyForcommunicationsEventArgs.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isReady"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpServerClientReadyForcommunicationsEventArgs.#ctor">
            <summary>
            S+ Constructor
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericUdpConnectedEventArgs">
            <summary>
            EventArgs for UDP connected
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericUdpConnectedEventArgs.UConnected">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericUdpConnectedEventArgs.Connected">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericUdpConnectedEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericUdpConnectedEventArgs.#ctor(System.UInt16)">
            <summary>
            
            </summary>
            <param name="uconnected"></param>
        </member>
        <member name="M:PepperDash.Core.GenericUdpConnectedEventArgs.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="connected"></param>
        </member>
        <member name="T:PepperDash.Core.GenericSecureTcpIpServer">
            <summary>
            Generic secure TCP/IP server
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpServer.ServerCCSection">
            <summary>
            Server listen lock
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpServer.DequeueLock">
            <summary>
            Queue lock
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpServer.MessageQueue">
            <summary>
            Queue to temporarily store received messages with the source IP and Port info. Defaults to size 20. Use constructor or set queue size property before
            calling initialize. 
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpServer.MonitorClient">
            <summary>
            A bandaid client that monitors whether the server is reachable
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpServer.MonitorClientTimer">
            <summary>
            Timer to operate the bandaid monitor client in a loop.
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpServer.MonitorClientFailureCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpServer.ConnectedClientsIndexes">
            <summary>
            The connected client indexes
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpServer.ProgramIsStopping">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.#ctor">
            <summary>
            constructor S+ Does not accept a key. Use initialze with key to set the debug key on this device. If using with + make sure to set all properties manually.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.#ctor(System.String)">
            <summary>
            constructor with debug key set at instantiation. Make sure to set all properties before listening. 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.#ctor(PepperDash.Core.TcpServerConfigObject)">
            <summary>
            Contstructor that sets all properties by calling the initialize method with a config object. This does set Queue size. 
            </summary>
            <param name="serverConfigObject"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.KillServer">
            <summary>
            Disconnects all clients and stops the server
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.Initialize(System.String)">
            <summary>
            Initialize Key for device using client name from SIMPL+. Called on Listen from SIMPL+
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.Initialize(PepperDash.Core.TcpServerConfigObject)">
            <summary>
            Initialze the server
            </summary>
            <param name="serverConfigObject"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.Listen">
            <summary>
            Start listening on the specified port
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.StopListening">
            <summary>
            Stop Listeneing
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.DisconnectClient(System.UInt32)">
            <summary>
            Disconnects Client
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.DisconnectAllClientsForShutdown">
            <summary>
            Disconnect All Clients
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.BroadcastText(System.String)">
            <summary>
            Broadcast text from server to all connected clients
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.SendTextToClient(System.String,System.UInt32)">
            <summary>
            Not sure this is useful in library, maybe Pro??
            </summary>
            <param name="text"></param>
            <param name="clientIndex"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.GetClientIPAddress(System.UInt32)">
            <summary>
            Get the IP Address for the client at the specifed index
            </summary>
            <param name="clientIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.SecureServer_SocketStatusChange(Crestron.SimplSharp.CrestronSockets.SecureTCPServer,System.UInt32,Crestron.SimplSharp.CrestronSockets.SocketStatus)">
            <summary>
            Secure Server Socket Status Changed Callback
            </summary>
            <param name="server"></param>
            <param name="clientIndex"></param>
            <param name="serverSocketStatus"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.SecureConnectCallback(Crestron.SimplSharp.CrestronSockets.SecureTCPServer,System.UInt32)">
            <summary>
            Secure TCP Client Connected to Secure Server Callback
            </summary>
            <param name="server"></param>
            <param name="clientIndex"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.SecureReceivedDataAsyncCallback(Crestron.SimplSharp.CrestronSockets.SecureTCPServer,System.UInt32,System.Int32)">
            <summary>
            Secure Received Data Async Callback
            </summary>
            <param name="mySecureTCPServer"></param>
            <param name="clientIndex"></param>
            <param name="numberOfBytesReceived"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.DequeueEvent">
            <summary>
            This method gets spooled up in its own thread an protected by a CCriticalSection to prevent multiple threads from running concurrently.
            It will dequeue items as they are enqueued automatically.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.CrestronEnvironment_ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Private Event Handler method to handle the closing of connections when the program stops
            </summary>
            <param name="programEventType"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.StartMonitorClient">
            <summary>
            Starts the monitor client cycle. Timed wait, then call RunMonitorClient
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.RunMonitorClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.StopMonitorClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.MonitorClient_IsReadyForComm(System.Object,PepperDash.Core.GenericTcpServerClientReadyForcommunicationsEventArgs)">
            <summary>
            On monitor connect, restart the operation
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpServer.MonitorClientHasHungCallback">
            <summary>
            If the client hangs, add to counter and maybe fire the choke event
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpServer.TextReceived">
            <summary>
            Event for Receiving text
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpServer.TextReceivedQueueInvoke">
            <summary>
            Event for Receiving text. Once subscribed to this event the receive callback will start a thread that dequeues the messages and invokes the event on a new thread. 
            It is not recommended to use both the TextReceived event and the TextReceivedQueueInvoke event. 
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpServer.ClientConnectionChange">
            <summary>
            Event for client connection socket status change
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpServer.ServerStateChange">
            <summary>
            Event for Server State Change
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpServer.ServerClientReadyForCommunications">
            <summary>
            For a server with a pre shared key, this will fire after the communication is established and the key exchange is complete. If no shared key, this will fire
            after connection is successful. Use this event to know when the client is ready for communication to avoid stepping on shared key. 
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.ServerHasChoked">
            <summary>
            A band aid event to notify user that the server has choked.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.ReceiveQueueSize">
            <summary>
            Receive Queue size. Defaults to 20. Will set to 20 if QueueSize property is less than 20. Use constructor or set queue size property before
            calling initialize. 
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.MonitorClientMaxFailureCount">
            <summary>
            3 by default
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.Status">
            <summary>
            Text representation of the Socket Status enum values for the server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.IsConnected">
            <summary>
            Bool showing if socket is connected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.UIsConnected">
            <summary>
            S+ helper for IsConnected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.IsListening">
            <summary>
            Bool showing if socket is connected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.UIsListening">
            <summary>
            S+ helper for IsConnected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.MaxClients">
            <summary>
            Max number of clients this server will allow for connection. Crestron max is 64. This number should be less than 65 
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.NumberOfClientsConnected">
            <summary>
            Number of clients currently connected.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.Port">
            <summary>
            Port Server should listen on
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.UPort">
            <summary>
            S+ helper for Port
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.SharedKeyRequired">
            <summary>
            Bool to show whether the server requires a preshared key. Must be set the same in the client, and if true shared keys must be identical on server/client
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.USharedKeyRequired">
            <summary>
            S+ helper for requires shared key bool
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.SharedKey">
            <summary>
            SharedKey is sent for varification to the server. Shared key can be any text (255 char limit in SIMPL+ Module), but must match the Shared Key on the Server module. 
            If SharedKey changes while server is listening or clients are connected, disconnect and stop listening will be called
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.HeartbeatRequired">
            <summary>
            Heartbeat Required bool sets whether server disconnects client if heartbeat is not received
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.UHeartbeatRequired">
            <summary>
            S+ Helper for Heartbeat Required
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.HeartbeatRequiredIntervalMs">
            <summary>
            Milliseconds before server expects another heartbeat. Set by property HeartbeatRequiredIntervalInSeconds which is driven from S+
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.HeartbeatRequiredIntervalInSeconds">
            <summary>
            Simpl+ Heartbeat Analog value in seconds
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.HeartbeatStringToMatch">
            <summary>
            String to Match for heartbeat. If null or empty any string will reset heartbeat timer
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.BufferSize">
            <summary>
            Defaults to 2000
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpServer.ServerStopped">
            <summary>
            Private flag to note that the server has stopped intentionally
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericSecureTcpIpServer.ServerHasChokedCallbackDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.CommunicationStreamDebugging">
            <summary>
            Controls the ability to disable/enable debugging of TX/RX data sent to/from a device with a built in timer to disable
            </summary>
        </member>
        <member name="F:PepperDash.Core.CommunicationStreamDebugging.DebugExpiryPeriod">
            <summary>
            Timer to disable automatically if not manually disabled
            </summary>
        </member>
        <member name="M:PepperDash.Core.CommunicationStreamDebugging.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="parentDeviceKey"></param>
        </member>
        <member name="M:PepperDash.Core.CommunicationStreamDebugging.SetDebuggingWithDefaultTimeout(PepperDash.Core.eStreamDebuggingSetting)">
            <summary>
            Sets the debugging setting and if not setting to off, assumes the default of 30 mintues
            </summary>
            <param name="setting"></param>
        </member>
        <member name="M:PepperDash.Core.CommunicationStreamDebugging.SetDebuggingWithSpecificTimeout(PepperDash.Core.eStreamDebuggingSetting,System.UInt32)">
            <summary>
            Sets the debugging setting for the specified number of minutes
            </summary>
            <param name="setting"></param>
            <param name="minutes"></param>
        </member>
        <member name="M:PepperDash.Core.CommunicationStreamDebugging.DisableDebugging">
            <summary>
            Disabled debugging
            </summary>
        </member>
        <member name="P:PepperDash.Core.CommunicationStreamDebugging.ParentDeviceKey">
            <summary>
            Device Key that this instance configures
            </summary>
        </member>
        <member name="P:PepperDash.Core.CommunicationStreamDebugging.DebugSetting">
            <summary>
            The current debug setting
            </summary>
        </member>
        <member name="P:PepperDash.Core.CommunicationStreamDebugging.DebugTimeoutMinutes">
            <summary>
            Timeout in Minutes
            </summary>
        </member>
        <member name="P:PepperDash.Core.CommunicationStreamDebugging.RxStreamDebuggingIsEnabled">
            <summary>
            Indicates that receive stream debugging is enabled
            </summary>
        </member>
        <member name="P:PepperDash.Core.CommunicationStreamDebugging.TxStreamDebuggingIsEnabled">
            <summary>
            Indicates that transmit stream debugging is enabled
            </summary>
        </member>
        <member name="T:PepperDash.Core.eStreamDebuggingSetting">
            <summary>
            The available settings for stream debugging
            </summary>
        </member>
        <member name="F:PepperDash.Core.eStreamDebuggingSetting.Off">
            <summary>
            Debug off
            </summary>
        </member>
        <member name="F:PepperDash.Core.eStreamDebuggingSetting.Rx">
            <summary>
            Debug received data
            </summary>
        </member>
        <member name="F:PepperDash.Core.eStreamDebuggingSetting.Tx">
            <summary>
            Debug transmitted data
            </summary>
        </member>
        <member name="F:PepperDash.Core.eStreamDebuggingSetting.Both">
            <summary>
            Debug both received and transmitted data
            </summary>
        </member>
        <member name="T:PepperDash.Core.eStreamDebuggingDataTypeSettings">
            <summary>
            The available settings for stream debugging response types
            </summary>
        </member>
        <member name="F:PepperDash.Core.eStreamDebuggingDataTypeSettings.Bytes">
            <summary>
            Debug data in byte format
            </summary>
        </member>
        <member name="F:PepperDash.Core.eStreamDebuggingDataTypeSettings.Text">
            <summary>
            Debug data in text format
            </summary>
        </member>
        <member name="F:PepperDash.Core.eStreamDebuggingDataTypeSettings.Both">
            <summary>
            Debug data in both byte and text formats
            </summary>
        </member>
        <member name="T:PepperDash.Core.Intersystem.Serialization.XSigSerializationException">
            <summary>
            Class to handle this specific exception type
            </summary>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Serialization.XSigSerializationException.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Serialization.XSigSerializationException.#ctor(System.String)">
            <summary>
            constructor with message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PepperDash.Core.Intersystem.Serialization.XSigSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            constructor with message and innner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.JsonToSimplConstants">
            <summary>
            Constants for Simpl modules
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.BoolValueChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.JsonIsValidBoolChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.ProgramCompatibility3SeriesChange">
            <summary>
            Reports the if the device is 3-series compatible
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.ProgramCompatibility4SeriesChange">
            <summary>
            Reports the if the device is 4-series compatible
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.DevicePlatformValueChange">
            <summary>
            Reports the device platform enum value
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.UshortValueChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.StringValueChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.FullPathToArrayChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.ActualFilePathChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.FilenameResolvedChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.FilePathResolvedChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.RootDirectoryChange">
            <summary>
            Reports the root directory change
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.RoomIdChange">
            <summary>
            Reports the room ID change
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.JsonToSimplConstants.RoomNameChange">
            <summary>
            Reports the room name change
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.SPlusValuesDelegate">
            <summary>
            S+ values delegate
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.SPlusValueWrapper">
            <summary>
            S+ values wrapper
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.SPlusValueWrapper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.JsonToSimpl.SPlusValueWrapper.#ctor(PepperDash.Core.JsonToSimpl.SPlusType,System.UInt16)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="index"></param>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.SPlusValueWrapper.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.SPlusValueWrapper.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.SPlusValueWrapper.BoolUShortValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.JsonToSimpl.SPlusValueWrapper.StringValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.JsonToSimpl.SPlusType">
            <summary>
            S+ types enum
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.SPlusType.Digital">
            <summary>
            Digital
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.SPlusType.Analog">
            <summary>
            Analog
            </summary>
        </member>
        <member name="F:PepperDash.Core.JsonToSimpl.SPlusType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="T:PepperDash.Core.LineReceivedHandler">
            <summary>
            Defines the string event handler for line events on the gather
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:PepperDash.Core.CommunicationGather">
            <summary>
            Attaches to IBasicCommunication as a text gather
            </summary>
        </member>
        <member name="F:PepperDash.Core.CommunicationGather.ReceiveBuffer">
            <summary>
            For receive buffer
            </summary>
        </member>
        <member name="F:PepperDash.Core.CommunicationGather.Delimiter">
            <summary>
            Delimiter, like it says!
            </summary>
        </member>
        <member name="M:PepperDash.Core.CommunicationGather.#ctor(PepperDash.Core.ICommunicationReceiver,System.Char)">
            <summary>
            Constructor for using a char delimiter
            </summary>
            <param name="port"></param>
            <param name="delimiter"></param>
        </member>
        <member name="M:PepperDash.Core.CommunicationGather.#ctor(PepperDash.Core.ICommunicationReceiver,System.String)">
            <summary>
            Constructor for using a single string delimiter
            </summary>
            <param name="port"></param>
            <param name="delimiter"></param>
        </member>
        <member name="M:PepperDash.Core.CommunicationGather.#ctor(PepperDash.Core.ICommunicationReceiver,System.String[])">
            <summary>
            Constructor for using an array of string delimiters
            </summary>
            <param name="port"></param>
            <param name="delimiters"></param>
        </member>
        <member name="M:PepperDash.Core.CommunicationGather.Stop">
            <summary>
            Disconnects this gather from the Port's TextReceived event. This will not fire LineReceived
            after the this call.
            </summary>
        </member>
        <member name="M:PepperDash.Core.CommunicationGather.Port_TextReceived(System.Object,PepperDash.Core.GenericCommMethodReceiveTextArgs)">
            <summary>
            Handler for raw data coming from port 
            </summary>
        </member>
        <member name="M:PepperDash.Core.CommunicationGather.Port_TextReceivedStringDelimiter(System.Object,PepperDash.Core.GenericCommMethodReceiveTextArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PepperDash.Core.CommunicationGather.Finalize">
            <summary>
            Deconstructor.  Disconnects from port TextReceived events.
            </summary>
        </member>
        <member name="E:PepperDash.Core.CommunicationGather.LineReceived">
            <summary>
            Event that fires when a line is received from the IBasicCommunication source.
            The event merely contains the text, not an EventArgs type class.
            </summary>
        </member>
        <member name="P:PepperDash.Core.CommunicationGather.Port">
            <summary>
            The communication port that this gathers on
            </summary>
        </member>
        <member name="P:PepperDash.Core.CommunicationGather.IncludeDelimiter">
            <summary>
            Default false. If true, the delimiter will be included in the line output
            events
            </summary>
        </member>
        <member name="T:PepperDash.Core.CommStatic">
            <summary>
            Background class that manages debug features for sockets
            </summary>
        </member>
        <member name="M:PepperDash.Core.CommStatic.#cctor">
            <summary>
            Sets up the backing class. Adds console commands for S#Pro programs
            </summary>
        </member>
        <member name="M:PepperDash.Core.CommStatic.GetSocketType(PepperDash.Core.ISocketStatus)">
            <summary>
            Helper for socket list, to show types
            </summary>
        </member>
        <member name="M:PepperDash.Core.CommStatic.AddSocket(PepperDash.Core.ISocketStatus)">
            <summary>
            
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:PepperDash.Core.CommStatic.RemoveSocket(PepperDash.Core.ISocketStatus)">
            <summary>
            
            </summary>
            <param name="socket"></param>
        </member>
        <member name="T:PepperDash.Core.GenericTcpIpClient_ForServer">
            <summary>
            Generic TCP/IP client for server
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpClient_ForServer.ConnectionHasHungCallback">
            <summary>
            This is something of a band-aid callback. If the client times out during the connection process, because the server
            is stuck, this will fire.  It is intended to be used by the Server class monitor client, to help
            keep a watch on the server and reset it if necessary.
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpClient_ForServer.IsTryingToConnect">
            <summary>
            Semaphore on connect method
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpClient_ForServer.DisconnectCalledByUser">
            <summary>
            Flag Set only when the disconnect method is called.
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpClient_ForServer.RetryTimer">
            <summary>
            private Timer for auto reconnect
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpClient_ForServer.HeartbeatString">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpClient_ForServer.HeartbeatInterval">
            <summary>
            
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpClient_ForServer.ConnectFailTimer">
            <summary>
            Used to force disconnection on a dead connect attempt
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpClient_ForServer.Client">
            <summary>
            Internal secure client
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="key"></param>
            <param name="address"></param>
            <param name="port"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.#ctor">
            <summary>
            Constructor for S+
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.Initialize(System.String)">
            <summary>
            Just to help S+ set the key
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.CrestronEnvironment_ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Handles closing this up when the program shuts down
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.Connect">
            <summary>
            Connect Method. Will return if already connected. Will write errors if missing address, port, or unique key/name.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.Cleanup">
            <summary>
             Internal call to close up client. ALWAYS use this when disconnecting.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.CheckClosedAndTryReconnect">
            <summary>ff
            Called from Connect failure or Socket Status change if 
            auto reconnect and socket disconnected (Not disconnected by user)
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.Receive(Crestron.SimplSharp.CrestronSockets.TCPClient,System.Int32)">
            <summary>
            Receive callback
            </summary>
            <param name="client"></param>
            <param name="numBytes"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.StopWaitForSharedKeyTimer">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.SendText(System.String)">
            <summary>
            General send method
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.SendBytes(System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.Client_SocketStatusChange(Crestron.SimplSharp.CrestronSockets.TCPClient,Crestron.SimplSharp.CrestronSockets.SocketStatus)">
            <summary>
            SocketStatusChange Callback 
            </summary>
            <param name="client"></param>
            <param name="clientSocketStatus"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.OnConnectionChange">
            <summary>
            Helper for ConnectionChange event
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient_ForServer.OnClientReadyForcommunications(System.Boolean)">
            <summary>
            Helper to fire ClientReadyForCommunications event
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericTcpIpClient_ForServer.TextReceived">
            <summary>
            Notifies of text received
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericTcpIpClient_ForServer.ConnectionChange">
            <summary>
            Notifies of socket status change
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericTcpIpClient_ForServer.ClientReadyForCommunications">
            <summary>
            For a client with a pre shared key, this will fire after the communication is established and the key exchange is complete. If you require
            a key and subscribe to the socket change event and try to send data on a connection the data sent will interfere with the key exchange and disconnect.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.Hostname">
            <summary>
            Address of server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.Port">
            <summary>
            Port on server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.UPort">
            <summary>
            S+ helper
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.SharedKeyRequired">
            <summary>
            Bool to show whether the server requires a preshared key. This is used in the DynamicTCPServer class
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.USharedKeyRequired">
            <summary>
            S+ helper for requires shared key bool
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.SharedKey">
            <summary>
            SharedKey is sent for varification to the server. Shared key can be any text (255 char limit in SIMPL+ Module), but must match the Shared Key on the Server module
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.WaitingForSharedKeyResponse">
            <summary>
            flag to show the client is waiting for the server to send the shared key
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.BufferSize">
            <summary>
            Defaults to 2000
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.IsConnected">
            <summary>
            Bool showing if socket is connected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.UIsConnected">
            <summary>
            S+ helper for IsConnected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.IsReadyForCommunication">
            <summary>
            Bool showing if socket is ready for communication after shared key exchange
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.UIsReadyForCommunication">
            <summary>
            S+ helper for IsReadyForCommunication
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.ClientStatus">
            <summary>
            Client socket status Read only
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.UStatus">
            <summary>
            Contains the familiar Simpl analog status values. This drives the ConnectionChange event
            and IsConnected would be true when this == 2.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.ClientStatusText">
            <summary>
            Status text shows the message associated with socket status
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.AutoReconnect">
            <summary>
            bool to track if auto reconnect should be set on the socket
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.UAutoReconnect">
            <summary>
            S+ helper for AutoReconnect
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.AutoReconnectIntervalMs">
            <summary>
            Milliseconds to wait before attempting to reconnect. Defaults to 5000
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.HeartbeatEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient_ForServer.UHeartbeatEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericTcpIpClient_ForServer.ConnectionHasHungCallbackDelegate">
            <summary>
            Band aid delegate for choked server
            </summary>
        </member>
        <member name="T:PepperDash.Core.WebApi.Presets.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.User.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.User.ExternalId">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.User.FirstName">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.User.LastName">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.WebApi.Presets.UserReceivedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.WebApi.Presets.UserReceivedEventArgs.#ctor">
            <summary>
            For Simpl+
            </summary>
        </member>
        <member name="M:PepperDash.Core.WebApi.Presets.UserReceivedEventArgs.#ctor(PepperDash.Core.WebApi.Presets.User,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="user"></param>
            <param name="success"></param>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.UserReceivedEventArgs.LookupSuccess">
            <summary>
            True when user is found
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.UserReceivedEventArgs.ULookupSuccess">
            <summary>
            For stupid S+
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.UserReceivedEventArgs.User">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.WebApi.Presets.UserAndRoomMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.UserAndRoomMessage.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.UserAndRoomMessage.RoomTypeId">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.UserAndRoomMessage.PresetNumber">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.WebApi.Presets.Preset">
            <summary>
            Represents a preset
            </summary>
        </member>
        <member name="M:PepperDash.Core.WebApi.Presets.Preset.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.Preset.Id">
            <summary>
            ID of preset
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.Preset.UserId">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.Preset.RoomTypeId">
            <summary>
            Room Type ID
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.Preset.PresetName">
            <summary>
            Preset Name
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.Preset.PresetNumber">
            <summary>
            Preset Number
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.Preset.Data">
            <summary>
            Preset Data
            </summary>
        </member>
        <member name="T:PepperDash.Core.WebApi.Presets.PresetReceivedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.WebApi.Presets.PresetReceivedEventArgs.#ctor">
            <summary>
            For Simpl+
            </summary>
        </member>
        <member name="M:PepperDash.Core.WebApi.Presets.PresetReceivedEventArgs.#ctor(PepperDash.Core.WebApi.Presets.Preset,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="preset"></param>
            <param name="success"></param>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.PresetReceivedEventArgs.LookupSuccess">
            <summary>
            True when the preset is found
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.PresetReceivedEventArgs.ULookupSuccess">
            <summary>
            S+ helper
            </summary>
        </member>
        <member name="P:PepperDash.Core.WebApi.Presets.PresetReceivedEventArgs.Preset">
            <summary>
            The preset
            </summary>
        </member>
        <member name="T:PepperDash.Core.ControlPropertiesConfig">
            <summary>
            Config properties that indicate how to communicate with a device for control
            </summary>
        </member>
        <member name="M:PepperDash.Core.ControlPropertiesConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.Method">
            <summary>
            The method of control
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.ControlPortDevKey">
            <summary>
            The key of the device that contains the control port
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.ControlPortNumber">
            <summary>
            The number of the control port on the device specified by ControlPortDevKey
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.ControlPortName">
            <summary>
            The name of the control port on the device specified by ControlPortDevKey
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.TcpSshProperties">
            <summary>
            Properties for ethernet based communications
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.IrFile">
            <summary>
            The filename and path for the IR file
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.IpId">
            <summary>
            The IpId of a Crestron device
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.IpIdInt">
            <summary>
            Readonly uint representation of the IpId
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.EndOfLineChar">
            <summary>
            Char indicating end of line
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.EndOfLineString">
            <summary>
            Defaults to Environment.NewLine;
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.DeviceReadyResponsePattern">
            <summary>
            Indicates 
            </summary>
        </member>
        <member name="P:PepperDash.Core.ControlPropertiesConfig.RoomId">
            <summary>
            Used when communcating to programs running in VC-4
            </summary>
        </member>
        <member name="T:PepperDash.Core.PasswordManagement.PasswordManager">
            <summary>
            Allows passwords to be stored and managed
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManager.Passwords">
            <summary>
            Public dictionary of known passwords
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManager._passwords">
            <summary>
            Private dictionary, used when passwords are updated
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManager.PasswordTimer">
            <summary>
            Timer used to wait until password changes have stopped before updating the dictionary
            </summary>
        </member>
        <member name="F:PepperDash.Core.PasswordManagement.PasswordManager.PasswordTimerElapsedMs">
            <summary>
            Timer length
            </summary>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordManager.Initialize">
            <summary>
            Initialize password manager
            </summary>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordManager.UpdatePassword(System.UInt16,System.String)">
            <summary>
            Updates password stored in the dictonary
            </summary>
            <param name="key"></param>
            <param name="password"></param>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordManager.PasswordTimerElapsed">
            <summary>
            CTimer callback function
            </summary>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordManager.PasswordTimerMs(System.UInt16)">
            <summary>
            Method to change the default timer value, (default 5000ms/5s)
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordManager.ListPasswords">
            <summary>
            Helper method for debugging to see what passwords are in the lists
            </summary>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordManager.OnBoolChange(System.Boolean,System.UInt16,System.UInt16)">
            <summary>
            Protected boolean change event handler
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordManager.OnUshrtChange(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Protected ushort change event handler
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordManager.OnStringChange(System.String,System.UInt16,System.UInt16)">
            <summary>
            Protected string change event handler
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:PepperDash.Core.PasswordManagement.PasswordManager.OnPasswordChange(System.String,System.UInt16,System.UInt16)">
            <summary>
            Protected password change event handler
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="E:PepperDash.Core.PasswordManagement.PasswordManager.BoolChange">
            <summary>
            Boolean event 
            </summary>
        </member>
        <member name="E:PepperDash.Core.PasswordManagement.PasswordManager.UshrtChange">
            <summary>
            Ushort event
            </summary>
        </member>
        <member name="E:PepperDash.Core.PasswordManagement.PasswordManager.StringChange">
            <summary>
            String event
            </summary>
        </member>
        <member name="E:PepperDash.Core.PasswordManagement.PasswordManager.PasswordChange">
            <summary>
            Event to notify clients of an updated password at the specified index (uint)
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericTcpIpClient">
            <summary>
            A class to handle basic TCP/IP communications with a server
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpClient._client">
            <summary>
            The actual client class
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericTcpIpClient.DisconnectCalledByUser">
            <summary>
            Set only when the disconnect method is called
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="key">unique string to differentiate between instances</param>
            <param name="address"></param>
            <param name="port"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.#ctor">
            <summary>
            Default constructor for S+
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.Initialize(System.String)">
            <summary>
            Just to help S+ set the key
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.CrestronEnvironment_ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Handles closing this up when the program shuts down
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.Deactivate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.Connect">
            <summary>
            Attempts to connect to the server
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.Disconnect">
            <summary>
            Attempts to disconnect the client
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.DisconnectClient">
            <summary>
            Does the actual disconnect business
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.ConnectToServerCallback(Crestron.SimplSharp.CrestronSockets.TCPClient)">
            <summary>
            Callback method for connection attempt
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.WaitAndTryReconnect">
            <summary>
            Disconnects, waits and attemtps to connect again
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.Receive(Crestron.SimplSharp.CrestronSockets.TCPClient,System.Int32)">
            <summary>
            Recieves incoming data
            </summary>
            <param name="client"></param>
            <param name="numBytes"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.SendText(System.String)">
            <summary>
            General send method
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.SendEscapedText(System.String)">
            <summary>
            This is useful from console and...?
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.SendBytes(System.Byte[])">
            <summary>
            Sends Bytes to the server
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:PepperDash.Core.GenericTcpIpClient.Client_SocketStatusChange(Crestron.SimplSharp.CrestronSockets.TCPClient,Crestron.SimplSharp.CrestronSockets.SocketStatus)">
            <summary>
            Socket Status Change Handler
            </summary>
            <param name="client"></param>
            <param name="clientSocketStatus"></param>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.StreamDebugging">
            <summary>
            Object to enable stream debugging
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericTcpIpClient.BytesReceived">
            <summary>
            Fires when data is received from the server and returns it as a Byte array
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericTcpIpClient.TextReceived">
            <summary>
            Fires when data is received from the server and returns it as text
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericTcpIpClient.ConnectionChange">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.Hostname">
            <summary>
            Address of server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.Port">
            <summary>
            Port on server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.UPort">
            <summary>
            Another damn S+ helper because S+ seems to treat large port nums as signed ints
            which screws up things
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.BufferSize">
            <summary>
            Defaults to 2000
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.IsConnected">
            <summary>
            Bool showing if socket is connected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.UIsConnected">
            <summary>
            S+ helper for IsConnected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.ClientStatus">
            <summary>
            _client socket status Read only
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.UStatus">
            <summary>
            Contains the familiar Simpl analog status values. This drives the ConnectionChange event
            and IsConnected would be true when this == 2.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.ClientStatusText">
            <summary>
            Status text shows the message associated with socket status
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.UClientStatus">
            <summary>
            Ushort representation of client status
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.ConnectionFailure">
            <summary>
            Connection failure reason
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.AutoReconnect">
            <summary>
            bool to track if auto reconnect should be set on the socket
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.UAutoReconnect">
            <summary>
            S+ helper for AutoReconnect
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.AutoReconnectIntervalMs">
            <summary>
            Milliseconds to wait before attempting to reconnect. Defaults to 5000
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericTcpIpClient.Connected">
            <summary>
            
            </summary>
        </member>
        <member name="T:PepperDash.Core.TcpSshPropertiesConfig">
            <summary>
            Configuration properties for TCP/SSH Connections
            </summary>
        </member>
        <member name="M:PepperDash.Core.TcpSshPropertiesConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpSshPropertiesConfig.Address">
            <summary>
            Address to connect to
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpSshPropertiesConfig.Port">
            <summary>
            Port to connect to
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpSshPropertiesConfig.Username">
            <summary>
            Username credential
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpSshPropertiesConfig.Password">
            <summary>
            Passord credential
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpSshPropertiesConfig.BufferSize">
            <summary>
            Defaults to 32768
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpSshPropertiesConfig.AutoReconnect">
            <summary>
            Defaults to true
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpSshPropertiesConfig.AutoReconnectIntervalMs">
            <summary>
            Defaults to 5000ms
            </summary>
        </member>
        <member name="T:PepperDash.Core.TcpServerConfigObject">
            <summary>
            Tcp Server Config object with properties for a tcp server with shared key and heartbeat capabilities
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpServerConfigObject.Key">
            <summary>
            Uique key
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpServerConfigObject.MaxClients">
            <summary>
            Max Clients that the server will allow to connect. 
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpServerConfigObject.Secure">
            <summary>
            Bool value for secure. Currently not implemented in TCP sockets as they are not dynamic
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpServerConfigObject.Port">
            <summary>
            Port for the server to listen on
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpServerConfigObject.SharedKeyRequired">
            <summary>
            Require a shared key that both server and client negotiate. If negotiation fails server disconnects the client
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpServerConfigObject.SharedKey">
            <summary>
            The shared key that must match on the server and client
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpServerConfigObject.HeartbeatRequired">
            <summary>
            Require a heartbeat on the client/server connection that will cause the server/client to disconnect if the heartbeat is not received. 
            heartbeats do not raise received events. 
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpServerConfigObject.HeartbeatRequiredIntervalInSeconds">
            <summary>
            The interval in seconds for the heartbeat from the client. If not received client is disconnected
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpServerConfigObject.HeartbeatStringToMatch">
            <summary>
            HeartbeatString that will be checked against the message received. defaults to heartbeat if no string is provided. 
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpServerConfigObject.BufferSize">
            <summary>
            Client buffer size. See Crestron help. defaults to 2000 if not greater than 2000
            </summary>
        </member>
        <member name="P:PepperDash.Core.TcpServerConfigObject.ReceiveQueueSize">
            <summary>
            Receive Queue size must be greater than 20 or defaults to 20
            </summary>
        </member>
        <member name="T:PepperDash.Core.Intersystem.XSigHelpers">
            <summary>
            Helper methods for creating XSig byte sequences compatible with the Intersystem Communications (ISC) symbol.
            </summary>
            <remarks>
            Indexing is not from the start of each signal type but rather from the beginning of the first defined signal
            the Intersystem Communications (ISC) symbol.
            </remarks>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.ClearOutputs">
            <summary>
            Forces all outputs to 0.
            </summary>
            <returns>Bytes in XSig format for clear outputs trigger.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.SendStatus">
            <summary>
            Evaluate all inputs and re-transmit any digital, analog, and permanent serail signals not set to 0.
            </summary>
            <returns>Bytes in XSig format for send status trigger.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(PepperDash.Core.Intersystem.Serialization.IXSigSerialization)">
            <summary>
            Get bytes for an IXSigStateResolver object.
            </summary>
            <param name="xSigSerialization">XSig state resolver.</param>
            <returns>Bytes in XSig format for each token within the state representation.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(PepperDash.Core.Intersystem.Serialization.IXSigSerialization,System.Int32)">
            <summary>
            Get bytes for an IXSigStateResolver object, with a specified offset.
            </summary>
            <param name="xSigSerialization">XSig state resolver.</param>
            <param name="offset">Offset to which the data will be aligned.</param>
            <returns>Bytes in XSig format for each token within the state representation.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.Boolean)">
            <summary>
            Get bytes for a single digital signal.
            </summary>
            <param name="index">1-based digital index</param>
            <param name="value">Digital data to be encoded</param>
            <returns>Bytes in XSig format for digtial information.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get bytes for a single digital signal.
            </summary>
            <param name="index">1-based digital index</param>
            <param name="offset">Index offset.</param>
            <param name="value">Digital data to be encoded</param>
            <returns>Bytes in XSig format for digtial information.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.Boolean[])">
            <summary>
            Get byte sequence for multiple digital signals.
            </summary>
            <param name="startIndex">Starting index of the sequence.</param>
            <param name="values">Digital signal value array.</param>
            <returns>Byte sequence in XSig format for digital signal information.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            Get byte sequence for multiple digital signals.
            </summary>
            <param name="startIndex">Starting index of the sequence.</param>
            <param name="offset">Index offset.</param>
            <param name="values">Digital signal value array.</param>
            <returns>Byte sequence in XSig format for digital signal information.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.UInt16)">
            <summary>
            Get bytes for a single analog signal.
            </summary>
            <param name="index">1-based analog index</param>
            <param name="value">Analog data to be encoded</param>
            <returns>Bytes in XSig format for analog signal information.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Get bytes for a single analog signal.
            </summary>
            <param name="index">1-based analog index</param>
            <param name="offset">Index offset.</param>
            <param name="value">Analog data to be encoded</param>
            <returns>Bytes in XSig format for analog signal information.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.UInt16[])">
            <summary>
            Get byte sequence for multiple analog signals.
            </summary>
            <param name="startIndex">Starting index of the sequence.</param>
            <param name="values">Analog signal value array.</param>
            <returns>Byte sequence in XSig format for analog signal information.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            Get byte sequence for multiple analog signals.
            </summary>
            <param name="startIndex">Starting index of the sequence.</param>
            <param name="offset">Index offset.</param>
            <param name="values">Analog signal value array.</param>
            <returns>Byte sequence in XSig format for analog signal information.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.String)">
            <summary>
            Get bytes for a single serial signal.
            </summary>
            <param name="index">1-based serial index</param>
            <param name="value">Serial data to be encoded</param>
            <returns>Bytes in XSig format for serial signal information.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.Int32,System.String)">
            <summary>
            Get bytes for a single serial signal.
            </summary>
            <param name="index">1-based serial index</param>
            <param name="offset">Index offset.</param>
            <param name="value">Serial data to be encoded</param>
            <returns>Bytes in XSig format for serial signal information.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.String[])">
            <summary>
            Get byte sequence for multiple serial signals.
            </summary>
            <param name="startIndex">Starting index of the sequence.</param>
            <param name="values">Serial signal value array.</param>
            <returns>Byte sequence in XSig format for serial signal information.</returns>
        </member>
        <member name="M:PepperDash.Core.Intersystem.XSigHelpers.GetBytes(System.Int32,System.Int32,System.String[])">
            <summary>
            Get byte sequence for multiple serial signals.
            </summary>
            <param name="startIndex">Starting index of the sequence.</param>
            <param name="offset">Index offset.</param>
            <param name="values">Serial signal value array.</param>
            <returns>Byte sequence in XSig format for serial signal information.</returns>
        </member>
        <member name="T:PepperDash.Core.GenericSecureTcpIpClient_ForServer">
            <summary>
            Generic secure TCP/IP client for server
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient_ForServer.ConnectionHasHungCallback">
            <summary>
            This is something of a band-aid callback. If the client times out during the connection process, because the server
            is stuck, this will fire.  It is intended to be used by the Server class monitor client, to help
            keep a watch on the server and reset it if necessary.
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient_ForServer.IsTryingToConnect">
            <summary>
            Semaphore on connect method
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient_ForServer.DisconnectCalledByUser">
            <summary>
            Flag Set only when the disconnect method is called.
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient_ForServer.RetryTimer">
            <summary>
            private Timer for auto reconnect
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient_ForServer.ConnectFailTimer">
            <summary>
            Used to force disconnection on a dead connect attempt
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient_ForServer.Client">
            <summary>
            Internal secure client
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient_ForServer.DequeueLock">
            <summary>
            Queue lock
            </summary>
        </member>
        <member name="F:PepperDash.Core.GenericSecureTcpIpClient_ForServer.MessageQueue">
            <summary>
            Queue to temporarily store received messages with the source IP and Port info. Defaults to size 20. Use constructor or set queue size property before
            calling initialize. 
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="key"></param>
            <param name="address"></param>
            <param name="port"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.#ctor">
            <summary>
            Constructor for S+
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.#ctor(System.String,PepperDash.Core.TcpClientConfigObject)">
            <summary>
            Contstructor that sets all properties by calling the initialize method with a config object. 
            </summary>
            <param name="key"></param>
            <param name="clientConfigObject"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.Initialize(System.String)">
            <summary>
            Just to help S+ set the key
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.Initialize(PepperDash.Core.TcpClientConfigObject)">
            <summary>
            Initialize called by the constructor that accepts a client config object. Can be called later to reset properties of client. 
            </summary>
            <param name="clientConfigObject"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.CrestronEnvironment_ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Handles closing this up when the program shuts down
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.Connect">
            <summary>
            Connect Method. Will return if already connected. Will write errors if missing address, port, or unique key/name.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.Cleanup">
            <summary>
             Internal call to close up client. ALWAYS use this when disconnecting.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.CheckClosedAndTryReconnect">
            <summary>ff
            Called from Connect failure or Socket Status change if 
            auto reconnect and socket disconnected (Not disconnected by user)
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.Receive(Crestron.SimplSharp.CrestronSockets.SecureTCPClient,System.Int32)">
            <summary>
            Receive callback
            </summary>
            <param name="client"></param>
            <param name="numBytes"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.DequeueEvent">
            <summary>
            This method gets spooled up in its own thread an protected by a CCriticalSection to prevent multiple threads from running concurrently.
            It will dequeue items as they are enqueued automatically.
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.StopWaitForSharedKeyTimer">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.SendText(System.String)">
            <summary>
            General send method
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.SendBytes(System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.Client_SocketStatusChange(Crestron.SimplSharp.CrestronSockets.SecureTCPClient,Crestron.SimplSharp.CrestronSockets.SocketStatus)">
            <summary>
            SocketStatusChange Callback 
            </summary>
            <param name="client"></param>
            <param name="clientSocketStatus"></param>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.OnConnectionChange">
            <summary>
            Helper for ConnectionChange event
            </summary>
        </member>
        <member name="M:PepperDash.Core.GenericSecureTcpIpClient_ForServer.OnClientReadyForcommunications(System.Boolean)">
            <summary>
            Helper to fire ClientReadyForCommunications event
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpClient_ForServer.TextReceived">
            <summary>
            Notifies of text received
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpClient_ForServer.AutoReconnectTriggered">
            <summary>
            Notifies of auto reconnect sequence triggered
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpClient_ForServer.TextReceivedQueueInvoke">
            <summary>
            Event for Receiving text. Once subscribed to this event the receive callback will start a thread that dequeues the messages and invokes the event on a new thread. 
            It is not recommended to use both the TextReceived event and the TextReceivedQueueInvoke event. 
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpClient_ForServer.ConnectionChange">
            <summary>
            Notifies of socket status change
            </summary>
        </member>
        <member name="E:PepperDash.Core.GenericSecureTcpIpClient_ForServer.ClientReadyForCommunications">
            <summary>
            For a client with a pre shared key, this will fire after the communication is established and the key exchange is complete. If you require
            a key and subscribe to the socket change event and try to send data on a connection the data sent will interfere with the key exchange and disconnect.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.Hostname">
            <summary>
            Address of server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.Port">
            <summary>
            Port on server
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.UPort">
            <summary>
            S+ helper
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.SharedKeyRequired">
            <summary>
            Bool to show whether the server requires a preshared key. This is used in the DynamicTCPServer class
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.USharedKeyRequired">
            <summary>
            S+ helper for requires shared key bool
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.SharedKey">
            <summary>
            SharedKey is sent for varification to the server. Shared key can be any text (255 char limit in SIMPL+ Module), but must match the Shared Key on the Server module
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.WaitingForSharedKeyResponse">
            <summary>
            flag to show the client is waiting for the server to send the shared key
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.BufferSize">
            <summary>
            Defaults to 2000
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.IsConnected">
            <summary>
            Bool showing if socket is connected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.UIsConnected">
            <summary>
            S+ helper for IsConnected
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.IsReadyForCommunication">
            <summary>
            Bool showing if socket is ready for communication after shared key exchange
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.UIsReadyForCommunication">
            <summary>
            S+ helper for IsReadyForCommunication
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.ClientStatus">
            <summary>
            Client socket status Read only
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.UStatus">
            <summary>
            Contains the familiar Simpl analog status values. This drives the ConnectionChange event
            and IsConnected would be true when this == 2.
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.ClientStatusText">
            <summary>
            Status text shows the message associated with socket status
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.AutoReconnect">
            <summary>
            bool to track if auto reconnect should be set on the socket
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.UAutoReconnect">
            <summary>
            S+ helper for AutoReconnect
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.AutoReconnectIntervalMs">
            <summary>
            Milliseconds to wait before attempting to reconnect. Defaults to 5000
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.HeartbeatEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.UHeartbeatEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.HeartbeatString">
            <summary>
            
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.HeartbeatInterval">
            <summary>
            Milliseconds before server expects another heartbeat. Set by property HeartbeatRequiredIntervalInSeconds which is driven from S+
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.HeartbeatRequiredIntervalInSeconds">
            <summary>
            Simpl+ Heartbeat Analog value in seconds
            </summary>
        </member>
        <member name="P:PepperDash.Core.GenericSecureTcpIpClient_ForServer.ReceiveQueueSize">
            <summary>
            Receive Queue size. Defaults to 20. Will set to 20 if QueueSize property is less than 20. Use constructor or set queue size property before
            calling initialize. 
            </summary>
        </member>
        <member name="T:PepperDash.Core.GenericSecureTcpIpClient_ForServer.ConnectionHasHungCallbackDelegate">
            <summary>
            Band aid delegate for choked server
            </summary>
        </member>
    </members>
</doc>
